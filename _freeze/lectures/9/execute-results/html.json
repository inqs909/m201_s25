{
  "hash": "c774b489c5a4f944397cdad691fbd678",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: 4/1/25\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Sampling Distributions\n\n- Distribution of a statistic over repeated samples\n\n::: notes\nIf we took many samples, the statistics (like means) would vary. Their distribution helps us quantify uncertainty.\n:::\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\n\n\n## Randomness Effect 1\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 2\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 3\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 4\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 5\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Standard Error\n\nThe Standard Error is the standard deviation of a statistic itself.\n\n::: fragment\nSE tells us how much a statistic (like the mean) varies from sample to sample. Smaller SE = more precision.\n:::\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"15\",\"3\":\"Genderfluid\",\"4\":\"Gold\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"5.062660\",\"8\":\"24.70896\",\"9\":\"160.68258\",\"10\":\"2\",\"11\":\"4.77729372\",\"12\":\"11094.20\",\"13\":\"32.66964\",\"14\":\"6.425320\",\"15\":\"959.3321\"},{\"1\":\"2\",\"2\":\"17\",\"3\":\"Male\",\"4\":\"Black\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.139992\",\"8\":\"29.98100\",\"9\":\"141.53870\",\"10\":\"6\",\"11\":\"0.47104372\",\"12\":\"11179.19\",\"13\":\"37.72595\",\"14\":\"13.489750\",\"15\":\"969.7289\"},{\"1\":\"3\",\"2\":\"11\",\"3\":\"Genderfluid\",\"4\":\"Black\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"4.778785\",\"8\":\"29.02463\",\"9\":\"154.21923\",\"10\":\"5\",\"11\":\"0.85416423\",\"12\":\"10995.79\",\"13\":\"38.84335\",\"14\":\"60.284664\",\"15\":\"945.9503\"},{\"1\":\"4\",\"2\":\"5\",\"3\":\"Female\",\"4\":\"Gray\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.917317\",\"8\":\"25.37928\",\"9\":\"143.20281\",\"10\":\"9\",\"11\":\"1.99090540\",\"12\":\"10838.57\",\"13\":\"29.74581\",\"14\":\"29.808357\",\"15\":\"927.0282\"},{\"1\":\"5\",\"2\":\"9\",\"3\":\"Female\",\"4\":\"Brown\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"5.152010\",\"8\":\"25.81724\",\"9\":\"112.62360\",\"10\":\"8\",\"11\":\"1.12851936\",\"12\":\"10965.76\",\"13\":\"36.86917\",\"14\":\"-4.466497\",\"15\":\"942.9860\"},{\"1\":\"6\",\"2\":\"12\",\"3\":\"Male\",\"4\":\"Black\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"5.198458\",\"8\":\"27.27477\",\"9\":\"133.32967\",\"10\":\"5\",\"11\":\"0.28842164\",\"12\":\"11057.03\",\"13\":\"34.44702\",\"14\":\"45.367640\",\"15\":\"953.7446\"},{\"1\":\"7\",\"2\":\"4\",\"3\":\"Genderfluid\",\"4\":\"Gray\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"4.923164\",\"8\":\"27.72204\",\"9\":\"97.51032\",\"10\":\"1\",\"11\":\"1.14486036\",\"12\":\"10833.30\",\"13\":\"29.43915\",\"14\":\"-16.946345\",\"15\":\"926.0353\"},{\"1\":\"8\",\"2\":\"10\",\"3\":\"Genderfluid\",\"4\":\"Silver\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.961821\",\"8\":\"26.68807\",\"9\":\"116.46309\",\"10\":\"6\",\"11\":\"0.08021933\",\"12\":\"10975.63\",\"13\":\"37.33684\",\"14\":\"15.425810\",\"15\":\"944.0459\"},{\"1\":\"9\",\"2\":\"11\",\"3\":\"Female\",\"4\":\"Gray\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"4.862582\",\"8\":\"29.73883\",\"9\":\"114.38716\",\"10\":\"10\",\"11\":\"0.64542595\",\"12\":\"11001.35\",\"13\":\"32.43228\",\"14\":\"13.703255\",\"15\":\"947.4838\"},{\"1\":\"10\",\"2\":\"17\",\"3\":\"Agender\",\"4\":\"Gold\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"5.432455\",\"8\":\"29.02096\",\"9\":\"141.11068\",\"10\":\"10\",\"11\":\"1.71996804\",\"12\":\"11162.08\",\"13\":\"30.47522\",\"14\":\"30.956233\",\"15\":\"967.5589\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## Unicorn Data Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2.76654\n```\n\n\n:::\n:::\n\n\n\n## Collecting\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"972.6933\",\"2\":\"11202.93\"},{\"1\":\"940.3730\",\"2\":\"10945.08\"},{\"1\":\"921.7106\",\"2\":\"10797.68\"},{\"1\":\"957.1284\",\"2\":\"11080.98\"},{\"1\":\"941.2288\",\"2\":\"10953.03\"},{\"1\":\"912.0807\",\"2\":\"10720.30\"},{\"1\":\"947.9005\",\"2\":\"11004.74\"},{\"1\":\"964.2206\",\"2\":\"11135.44\"},{\"1\":\"953.2579\",\"2\":\"11049.41\"},{\"1\":\"966.3159\",\"2\":\"11153.44\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## DGP of Magical Score 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n## DGP of Magical Score 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3422.074         8.001\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3415.224         8.008\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3421.590         8.002\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3431.181         7.991\n```\n\n\n:::\n:::\n\n\n\n## Collecting 1000 Samples\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(Magical_Score ~ Nature_Score, 1, unicorns(500)))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 7.999438 7.996674 7.995469 7.998382 7.996859 7.994082 7.997401 8.003169\n#>    [9] 7.995830 8.008999 7.994556 7.998273 7.994390 7.995247 8.003674 7.997915\n#>   [17] 7.992698 7.998411 7.990822 7.999980 8.003716 7.997549 7.991804 7.999116\n#>   [25] 8.003934 7.993250 7.994899 8.007665 8.001598 8.001039 8.000403 7.996520\n#>   [33] 8.002898 7.993326 7.995336 8.007566 8.001755 8.003359 7.996071 7.999379\n#>   [41] 8.001128 8.004139 7.998209 8.009284 8.003452 8.002449 8.001472 7.996994\n#>   [49] 8.000527 8.005120 7.990690 8.002089 7.993726 7.993077 8.000645 7.999279\n#>   [57] 8.007025 7.999669 8.000497 8.002883 8.001081 7.995444 7.998697 7.998448\n#>   [65] 7.999487 8.000692 8.000594 8.000662 8.002371 7.997530 8.002520 7.999631\n#>   [73] 7.992761 8.001158 7.997764 7.993326 8.004114 8.011083 7.994598 7.998333\n#>   [81] 7.998805 7.996224 8.005108 7.989425 8.004168 7.995918 7.999573 8.002016\n#>   [89] 7.995787 8.002040 8.004568 7.998017 7.999355 7.997987 7.993947 8.000461\n#>   [97] 7.997549 7.999377 7.997881 7.996641 7.999589 7.992412 7.994142 8.003721\n#>  [105] 8.002856 8.001302 7.996728 7.992015 7.996466 8.002715 7.995305 8.000827\n#>  [113] 8.005843 8.001840 8.003773 8.002879 7.997890 7.997213 7.998753 8.004665\n#>  [121] 8.000204 7.997218 8.000608 8.007543 8.003496 8.005370 8.003619 7.994881\n#>  [129] 8.003120 7.999783 8.004327 7.996434 8.009592 7.998798 8.002042 7.993196\n#>  [137] 7.997656 8.002588 7.999411 8.003640 7.997683 7.995796 7.998262 8.001999\n#>  [145] 7.998988 8.003018 7.999192 7.997938 7.994595 8.004520 7.991429 7.996793\n#>  [153] 8.000738 8.001284 7.997376 7.999508 8.007260 7.998700 8.004171 8.004624\n#>  [161] 8.003195 7.994684 8.003964 8.008792 7.995493 7.999532 8.000747 7.997940\n#>  [169] 7.996127 8.001348 7.999925 8.000039 8.004195 7.999346 8.003335 8.002056\n#>  [177] 8.008561 8.005546 7.998452 7.999964 7.997196 8.000981 7.989706 8.009242\n#>  [185] 7.999767 7.992948 8.008240 7.990863 7.996821 7.995580 8.002453 8.003075\n#>  [193] 8.005870 7.999708 7.994312 8.002021 7.997533 8.003335 7.995198 8.005132\n#>  [201] 8.000015 7.997077 8.004265 7.999461 8.002779 7.999269 7.993568 8.001665\n#>  [209] 7.996340 8.000349 7.996996 8.002216 7.997866 7.995439 7.997394 7.999731\n#>  [217] 7.999611 7.997031 7.993277 8.002121 8.001494 7.998858 7.996419 8.001852\n#>  [225] 8.005505 8.002548 8.001486 7.997419 8.002292 8.000578 8.002743 8.000340\n#>  [233] 8.005237 7.998929 7.995082 7.999851 8.003294 8.004432 7.996889 8.006231\n#>  [241] 8.000659 8.001784 7.999428 8.005941 8.001449 8.007220 8.000010 7.995378\n#>  [249] 8.004739 8.005369 8.003626 8.002173 8.003300 8.002234 7.991895 8.006415\n#>  [257] 8.002009 8.000041 7.997136 8.002016 8.001430 8.001018 7.999388 7.996001\n#>  [265] 8.001587 7.996444 7.999627 8.001511 7.992113 8.001984 7.999731 8.005337\n#>  [273] 8.002942 7.998456 7.996489 7.998525 7.998781 7.999905 8.006494 7.995420\n#>  [281] 7.999968 7.996431 7.998514 7.993150 7.995516 8.003010 8.002137 7.996873\n#>  [289] 7.992141 8.000518 7.998958 7.996565 8.001261 8.004302 7.999487 7.999132\n#>  [297] 7.999321 8.006158 8.005862 7.991301 7.997915 8.005414 7.993867 7.997428\n#>  [305] 7.999037 8.002430 7.994552 7.996002 7.997175 8.003076 7.992781 7.993140\n#>  [313] 7.994588 7.996467 7.997256 8.000174 8.011357 7.999836 7.999420 8.002369\n#>  [321] 7.999797 7.995462 8.002200 7.996305 8.000397 7.998733 8.002363 7.995196\n#>  [329] 7.997086 7.995711 8.005515 7.999847 8.000516 7.997567 8.002966 7.991995\n#>  [337] 7.998769 8.005298 7.994416 7.997012 7.998534 7.993541 7.994853 8.001847\n#>  [345] 7.998204 8.005029 8.000421 7.999367 8.003434 8.002340 8.003614 8.004975\n#>  [353] 7.994447 7.992979 7.996143 7.998473 7.995870 8.000420 7.992337 8.001986\n#>  [361] 7.998671 7.998414 8.004602 7.990124 7.999500 7.998297 7.996406 7.993048\n#>  [369] 7.998144 7.989578 8.003967 7.994946 8.004665 8.000854 8.010257 8.002703\n#>  [377] 8.002208 7.987476 7.989080 7.994529 8.001530 8.004520 7.995372 7.996683\n#>  [385] 8.003001 8.002329 8.007932 8.001246 8.004411 8.003952 7.996010 8.002687\n#>  [393] 7.996193 8.011761 7.998664 8.004047 7.995845 7.988312 8.005082 7.992096\n#>  [401] 8.000545 7.997355 7.997243 8.000507 8.004666 8.000474 7.993300 8.000754\n#>  [409] 8.001364 7.997470 8.001298 8.006315 8.003401 7.995756 7.999347 8.006188\n#>  [417] 8.001932 8.006068 8.000698 8.003393 8.006751 8.000232 8.004150 8.000923\n#>  [425] 7.996264 8.002800 8.002812 8.001977 7.998923 8.000796 7.999847 7.994481\n#>  [433] 8.011555 8.004556 7.997419 8.003383 7.993300 8.002273 7.996275 8.009541\n#>  [441] 8.001405 7.998309 8.004861 8.000192 7.995502 8.000066 8.004474 7.992995\n#>  [449] 8.006032 7.999783 8.004580 7.998934 8.004394 7.999153 8.005966 8.002303\n#>  [457] 7.996724 8.003734 7.991884 7.994927 8.000511 7.994868 7.993357 7.989832\n#>  [465] 7.993323 7.991905 7.998462 8.003644 8.001375 7.999626 7.997910 8.003830\n#>  [473] 8.000496 8.005036 7.999939 8.001331 7.995456 7.997610 7.999089 8.008794\n#>  [481] 8.002911 8.001705 8.004534 8.002699 7.998196 7.996703 7.999738 8.004803\n#>  [489] 8.004017 8.002451 7.996682 8.001054 8.001958 8.001384 8.009548 7.997373\n#>  [497] 7.997727 8.000730 7.995191 8.001524 8.002681 7.999497 7.994743 8.003635\n#>  [505] 7.990270 8.001843 7.997286 7.997175 7.999199 8.001504 7.994045 7.995210\n#>  [513] 8.002933 7.999772 7.995972 8.000669 7.998122 7.987245 8.000536 8.004540\n#>  [521] 8.002816 7.993018 7.997789 7.999126 8.000307 8.003979 7.993326 7.998551\n#>  [529] 7.996780 7.999205 7.997118 7.999263 7.998516 7.994812 8.004935 7.997334\n#>  [537] 7.994731 8.004488 8.002021 7.998715 8.007854 8.003373 7.995168 7.999811\n#>  [545] 7.997228 8.000518 7.999082 7.995397 8.001819 7.999095 7.996965 8.006007\n#>  [553] 7.989453 8.001647 7.992427 7.994626 8.012275 8.002654 8.003441 7.998215\n#>  [561] 7.998059 8.002815 7.999184 8.003062 7.996320 8.001201 7.998197 8.005287\n#>  [569] 8.000128 8.000066 8.000436 8.000980 8.002638 8.000524 8.005874 7.997378\n#>  [577] 8.000234 8.001037 7.998800 7.998161 7.998835 8.000005 7.995311 8.003981\n#>  [585] 7.997414 8.000710 7.998135 8.001762 8.004912 8.001003 7.999515 7.999816\n#>  [593] 8.000467 7.991963 7.999656 7.998749 7.996438 7.993678 7.992948 8.006446\n#>  [601] 8.001446 8.003805 7.998955 8.002789 7.997323 8.009622 7.997156 8.002679\n#>  [609] 7.997236 8.001353 8.002436 7.997681 8.003378 7.997815 8.001204 8.005060\n#>  [617] 7.992381 7.997782 7.998091 7.993680 7.995287 7.995492 8.005368 8.007509\n#>  [625] 7.992934 7.999956 7.994345 8.003521 8.005997 7.998737 7.999797 8.006179\n#>  [633] 7.998146 7.999206 7.998579 7.996961 7.997055 7.993138 8.000793 7.998089\n#>  [641] 7.994246 8.000963 8.001142 8.005526 8.003022 7.998638 8.002413 7.993763\n#>  [649] 7.995592 8.005464 8.000405 7.998942 7.998555 7.997612 7.999484 7.992237\n#>  [657] 7.999559 7.999890 7.995827 8.001985 8.000761 7.998671 8.004775 7.996605\n#>  [665] 7.999676 7.993284 8.004282 8.002649 7.993314 7.994384 7.994235 8.006294\n#>  [673] 7.992741 7.999949 8.002906 8.004481 7.996220 8.002652 8.002285 7.999940\n#>  [681] 7.998955 7.995691 8.006270 7.999817 8.007342 7.999014 8.002877 8.007829\n#>  [689] 8.002348 7.999950 7.994678 7.993748 7.999461 8.003064 7.999467 8.005333\n#>  [697] 7.995327 7.993144 8.008996 7.994770 8.002473 8.004787 7.999571 7.999079\n#>  [705] 7.997835 7.998318 8.002228 8.005623 8.001561 7.994978 8.005701 8.000103\n#>  [713] 7.998932 8.000254 8.001366 7.996169 8.001890 7.996349 8.002921 7.992559\n#>  [721] 8.008152 7.999469 7.998522 7.992525 7.999984 8.004749 8.003420 8.000144\n#>  [729] 8.002488 7.996743 7.988253 8.000413 7.995444 7.999455 8.001378 7.998891\n#>  [737] 7.999161 7.996871 7.998428 8.001028 8.001453 7.994865 8.000647 7.996544\n#>  [745] 8.008073 8.005668 7.998466 7.998639 7.996752 7.993481 8.002474 7.998605\n#>  [753] 8.001798 7.993533 8.003590 7.998056 8.002400 8.004629 8.006034 8.001538\n#>  [761] 7.998556 7.993978 7.997151 8.000421 7.999416 7.999488 7.997704 8.009120\n#>  [769] 7.998271 7.993924 8.000352 7.995142 8.002162 7.998941 7.997571 7.998794\n#>  [777] 7.997724 8.006209 7.991055 7.997944 7.999982 8.002405 7.997368 7.998186\n#>  [785] 8.003518 7.991159 7.997081 8.002370 7.993618 8.000533 8.003580 7.999372\n#>  [793] 7.997277 7.999220 7.998903 7.999372 7.996478 8.004827 7.993013 8.000474\n#>  [801] 7.997734 8.000236 7.997808 8.002997 8.002838 7.998534 8.003773 8.001101\n#>  [809] 7.997768 7.999985 7.998529 8.002221 8.002018 7.998708 8.000457 8.007646\n#>  [817] 7.996339 7.995736 8.004150 8.002204 8.002874 8.003128 7.997577 8.001530\n#>  [825] 7.997094 7.989351 8.001952 8.006758 7.993666 7.994832 8.002238 7.998745\n#>  [833] 8.001019 8.001153 8.000979 7.997300 8.003230 7.995957 7.997699 8.002349\n#>  [841] 7.993566 7.993943 7.995477 8.003193 7.998602 8.006171 7.998572 7.996874\n#>  [849] 8.000790 8.008067 8.006346 8.002881 7.999687 8.004821 8.000874 7.999036\n#>  [857] 8.001938 7.991994 8.000434 7.996911 8.000670 8.005613 7.993733 7.995547\n#>  [865] 7.996299 7.999874 8.000558 7.994889 8.002131 7.996599 8.001294 8.001855\n#>  [873] 8.002436 8.002148 7.999237 7.997816 8.003602 8.000292 7.999207 8.001804\n#>  [881] 8.003439 7.997881 7.996348 7.998534 7.994865 8.000339 7.999254 7.994527\n#>  [889] 8.000296 8.003403 7.999351 8.000020 8.005406 8.000255 8.002675 7.996375\n#>  [897] 8.004729 7.998767 8.005054 8.000956 7.999571 7.996457 7.997136 8.001983\n#>  [905] 7.992840 7.999641 7.997038 8.006410 7.999883 7.999770 8.000543 8.001182\n#>  [913] 7.999816 8.004373 7.991364 7.998923 7.998407 7.999647 8.015105 7.999699\n#>  [921] 7.995012 8.002922 7.997217 8.001716 7.995627 7.999572 8.005293 7.998105\n#>  [929] 7.997418 8.000772 7.997748 7.999184 8.000222 7.992496 8.000478 8.007092\n#>  [937] 8.004170 8.000640 7.995920 8.003254 8.006622 7.998563 7.998909 7.999780\n#>  [945] 8.000055 8.008326 7.999546 7.994926 7.996328 7.996922 7.998107 8.002731\n#>  [953] 8.000165 8.001787 7.998599 8.003386 7.996753 8.003580 8.004689 7.997025\n#>  [961] 8.003197 7.998231 8.004840 8.000382 7.996508 8.001889 7.995964 7.999123\n#>  [969] 7.990414 7.995324 7.998356 8.002738 7.998463 8.003398 7.999233 8.000581\n#>  [977] 8.005173 8.000666 7.999339 7.999903 7.994999 7.993491 7.995456 7.999448\n#>  [985] 7.999325 8.003449 8.004068 8.004900 7.997201 7.998728 7.997273 8.001763\n#>  [993] 8.001557 8.002315 8.000333 7.997476 8.001166 8.001168 7.995677 8.003130\n```\n\n\n:::\n:::\n\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}