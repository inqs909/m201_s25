{
  "hash": "6cffbaa4c931ad6e2d9dfe99668a1edf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: 4/1/25\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"15\",\"3\":\"Female\",\"4\":\"Gray\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"5.376134\",\"8\":\"27.32082\",\"9\":\"189.5617\",\"10\":\"8\",\"11\":\"0.8758744\",\"12\":\"11079.82\",\"13\":\"35.23670\",\"14\":\"-27.355342\",\"15\":\"956.9235\"},{\"1\":\"2\",\"2\":\"16\",\"3\":\"Male\",\"4\":\"Pink\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"5.169291\",\"8\":\"30.52732\",\"9\":\"148.6078\",\"10\":\"1\",\"11\":\"0.1032569\",\"12\":\"11142.96\",\"13\":\"29.55006\",\"14\":\"30.821719\",\"15\":\"965.2081\"},{\"1\":\"3\",\"2\":\"19\",\"3\":\"Genderfluid\",\"4\":\"Brown\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"4.791866\",\"8\":\"28.80242\",\"9\":\"121.4040\",\"10\":\"7\",\"11\":\"0.3717006\",\"12\":\"11277.40\",\"13\":\"35.69255\",\"14\":\"17.441641\",\"15\":\"981.6149\"},{\"1\":\"4\",\"2\":\"6\",\"3\":\"Male\",\"4\":\"Black\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"5.246420\",\"8\":\"28.47288\",\"9\":\"153.3398\",\"10\":\"6\",\"11\":\"0.6501801\",\"12\":\"10900.55\",\"13\":\"31.49384\",\"14\":\"28.319948\",\"15\":\"934.2905\"},{\"1\":\"5\",\"2\":\"2\",\"3\":\"Female\",\"4\":\"Gray\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"5.443703\",\"8\":\"28.23831\",\"9\":\"156.1568\",\"10\":\"10\",\"11\":\"0.2865206\",\"12\":\"10757.50\",\"13\":\"31.90398\",\"14\":\"43.285351\",\"15\":\"916.4682\"},{\"1\":\"6\",\"2\":\"18\",\"3\":\"Female\",\"4\":\"Gold\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"4.333528\",\"8\":\"26.63908\",\"9\":\"148.3998\",\"10\":\"5\",\"11\":\"0.3834350\",\"12\":\"11193.34\",\"13\":\"36.28279\",\"14\":\"-1.367086\",\"15\":\"971.1291\"},{\"1\":\"7\",\"2\":\"7\",\"3\":\"Male\",\"4\":\"Pink\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.726155\",\"8\":\"25.45448\",\"9\":\"169.9307\",\"10\":\"10\",\"11\":\"0.2419264\",\"12\":\"10896.88\",\"13\":\"32.42668\",\"14\":\"79.000007\",\"15\":\"934.3977\"},{\"1\":\"8\",\"2\":\"15\",\"3\":\"Genderfluid\",\"4\":\"Pink\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"5.252328\",\"8\":\"28.38384\",\"9\":\"115.3723\",\"10\":\"4\",\"11\":\"0.4637780\",\"12\":\"11136.84\",\"13\":\"40.84014\",\"14\":\"8.643128\",\"15\":\"964.2781\"},{\"1\":\"9\",\"2\":\"2\",\"3\":\"Genderfluid\",\"4\":\"Gray\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"4.853750\",\"8\":\"26.61110\",\"9\":\"125.3511\",\"10\":\"9\",\"11\":\"2.2136729\",\"12\":\"10782.29\",\"13\":\"31.33947\",\"14\":\"8.925189\",\"15\":\"919.8138\"},{\"1\":\"10\",\"2\":\"1\",\"3\":\"Female\",\"4\":\"White\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.060622\",\"8\":\"26.60594\",\"9\":\"153.3715\",\"10\":\"8\",\"11\":\"0.9439472\",\"12\":\"10745.10\",\"13\":\"36.48505\",\"14\":\"24.091734\",\"15\":\"915.3972\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## Unicorn Data Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] -2.741735\n```\n\n\n:::\n:::\n\n\n\n## Collecting\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"959.1575\",\"2\":\"11097.11\"},{\"1\":\"947.2592\",\"2\":\"11003.12\"},{\"1\":\"934.0836\",\"2\":\"10898.34\"},{\"1\":\"954.2948\",\"2\":\"11059.50\"},{\"1\":\"956.0314\",\"2\":\"11068.73\"},{\"1\":\"918.5380\",\"2\":\"10770.26\"},{\"1\":\"913.6206\",\"2\":\"10731.56\"},{\"1\":\"936.7751\",\"2\":\"10914.52\"},{\"1\":\"922.8966\",\"2\":\"10807.10\"},{\"1\":\"936.5183\",\"2\":\"10913.74\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## DGP of Magical Score 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n## DGP of Magical Score 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3418.523         8.005\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3425.266         7.998\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3424.409         7.999\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3425.562         7.997\n```\n\n\n:::\n:::\n\n\n\n## Collecting 1000 Samples\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(Magical_Score ~ Nature_Score, 1, unicorns(500)))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 8.001039 7.995424 7.998978 8.006231 7.997319 7.999447 8.001647 8.007213\n#>    [9] 8.004721 8.002049 8.004657 7.998890 7.987239 7.994038 8.001023 7.998717\n#>   [17] 7.999547 8.005144 7.997047 8.005322 7.999135 7.991336 7.999450 7.994668\n#>   [25] 7.996320 7.993715 7.998078 7.998413 7.997435 8.002588 7.999076 8.006303\n#>   [33] 7.995423 7.997724 8.003068 7.993633 7.998774 7.999477 8.003030 7.991605\n#>   [41] 8.010024 8.007784 8.002413 8.002612 8.003989 8.002112 8.001727 7.998192\n#>   [49] 8.006906 7.992860 8.006628 7.997894 7.997763 7.997623 7.998646 7.995208\n#>   [57] 8.004984 7.996956 8.001154 8.004208 7.994734 7.996489 8.000079 8.001184\n#>   [65] 8.002515 7.997576 8.000469 8.001036 8.005044 7.998555 7.999805 8.006738\n#>   [73] 8.001875 7.999432 8.000694 8.006066 7.998450 8.000134 8.004326 8.002046\n#>   [81] 7.997384 8.001802 8.006776 7.998429 7.997291 8.000385 8.003750 7.995779\n#>   [89] 8.004254 7.998248 7.996141 7.997537 8.003760 7.993662 7.998423 7.998404\n#>   [97] 8.000441 7.996817 8.002844 7.995948 8.000583 8.004905 7.999043 8.003016\n#>  [105] 8.001158 7.999690 7.996345 8.006717 8.004607 8.002298 8.002570 7.993923\n#>  [113] 7.997821 8.004010 7.995376 8.003818 7.997284 8.003661 8.001292 8.004237\n#>  [121] 8.000705 8.000275 7.993522 7.996208 7.995301 7.999343 7.994368 8.002756\n#>  [129] 8.003369 8.002399 7.997827 7.996653 8.002018 8.000735 8.008033 7.997319\n#>  [137] 8.001671 7.992755 7.999350 7.996949 8.002627 8.001929 7.996374 7.996827\n#>  [145] 7.997828 7.999859 7.998110 7.999297 7.991588 7.996043 7.995705 8.001308\n#>  [153] 7.999252 7.994251 8.010275 8.002902 8.001008 8.000152 7.995628 7.997940\n#>  [161] 8.005774 7.997120 7.994588 7.996132 8.003775 8.007321 8.000386 8.001084\n#>  [169] 8.000095 8.000074 7.996240 8.000548 7.999536 8.000562 7.998894 8.001153\n#>  [177] 8.005973 7.998669 8.000162 8.002030 8.001912 7.997327 8.004979 7.997953\n#>  [185] 7.996306 8.008094 8.002597 8.002836 8.008694 8.003027 7.996661 8.002739\n#>  [193] 8.002629 8.011338 7.993668 8.000989 7.994522 7.995940 7.995721 8.000694\n#>  [201] 8.007828 7.993502 8.008759 8.004972 7.992492 8.000200 8.000550 7.998613\n#>  [209] 8.000893 7.996079 8.000271 8.004217 7.999621 7.998439 8.000134 7.996818\n#>  [217] 7.995897 7.998767 8.006429 7.991808 7.994699 8.001228 8.002749 7.999222\n#>  [225] 8.000240 7.993858 7.996960 8.000005 8.000208 7.995865 8.001727 7.999961\n#>  [233] 7.998046 7.996356 8.005130 7.998828 8.001909 8.000190 7.998771 8.003161\n#>  [241] 7.997924 7.996446 7.996441 7.999298 8.001446 8.004394 7.997150 8.000563\n#>  [249] 8.000911 8.004916 7.995518 8.002550 7.995850 8.005911 7.997010 8.002376\n#>  [257] 7.998344 7.989572 8.006660 8.000027 7.995413 8.003798 7.995594 8.003250\n#>  [265] 8.001938 7.999647 7.997500 7.999100 7.996224 7.998825 7.996794 8.000400\n#>  [273] 7.998930 7.992411 8.001693 8.002445 7.996897 8.000871 7.999868 7.995446\n#>  [281] 7.998211 7.993223 7.996405 7.999553 8.003226 8.000124 8.007135 8.000042\n#>  [289] 8.000899 7.996872 8.004594 7.996360 8.006758 7.994669 7.999791 8.000634\n#>  [297] 7.990232 7.997922 7.998059 8.004780 8.006710 8.003275 7.998861 7.997527\n#>  [305] 8.005871 7.999948 8.001486 7.997278 7.997495 7.994919 7.997040 8.004331\n#>  [313] 8.006059 8.005040 7.997972 8.000036 7.992041 7.998973 7.986941 8.000469\n#>  [321] 8.001694 7.999418 8.007100 8.005316 8.003439 7.991563 8.006785 8.001978\n#>  [329] 8.004127 7.992321 7.995161 7.999634 7.991959 8.001793 7.995870 8.005097\n#>  [337] 7.996970 7.993322 7.997818 8.001600 7.996305 7.997746 8.005762 7.998594\n#>  [345] 8.007027 7.999629 7.996072 8.006063 7.996980 7.997671 8.006669 8.002567\n#>  [353] 8.004979 7.993332 7.993232 7.998067 7.993628 7.994016 8.000966 7.997022\n#>  [361] 7.994944 8.002908 8.002875 7.995729 8.003886 7.996744 7.995882 8.003520\n#>  [369] 8.005567 7.997110 8.004586 8.004235 8.003362 7.994406 7.999326 7.991222\n#>  [377] 7.995645 8.004339 7.994513 7.996881 8.000206 8.005570 7.998120 8.001952\n#>  [385] 7.995433 7.999055 8.001279 7.998668 7.999583 7.998860 7.997404 7.996661\n#>  [393] 7.998170 7.994006 8.000444 7.999897 7.996095 8.004840 7.996321 8.004550\n#>  [401] 7.994234 8.001469 8.000385 7.998297 8.004710 7.994631 8.004634 7.999534\n#>  [409] 7.992754 7.996880 7.999322 7.995502 7.992247 7.999755 7.999642 7.995513\n#>  [417] 8.009953 8.005530 8.004040 7.997150 8.002559 7.999714 8.005862 7.995887\n#>  [425] 7.994208 7.998341 7.995700 7.993678 7.998311 7.998622 7.996984 8.000239\n#>  [433] 7.996411 7.999377 8.002466 7.999766 8.002873 8.002080 7.999927 7.999046\n#>  [441] 7.999789 7.993528 7.995075 8.002775 7.998526 8.005045 8.005528 8.001067\n#>  [449] 7.996293 8.004840 8.000838 8.002589 8.000926 8.010624 7.991845 7.998454\n#>  [457] 7.993909 7.998319 7.997605 7.995659 7.994973 7.997829 7.995492 8.003935\n#>  [465] 7.998378 7.997833 7.990803 7.992746 7.999853 7.999337 8.001279 7.998824\n#>  [473] 8.003000 8.004067 8.007826 8.001456 7.997332 7.998789 7.995401 7.993388\n#>  [481] 7.995422 7.995064 7.998791 7.997638 7.997910 7.994195 7.997326 7.999905\n#>  [489] 8.001840 8.000879 8.007022 7.999877 8.006558 7.997480 8.005430 7.998079\n#>  [497] 7.999446 8.000837 8.008294 7.996368 8.003301 8.003681 7.999059 8.001617\n#>  [505] 7.999584 7.998340 8.001803 8.001327 8.003766 8.002818 7.998859 7.995575\n#>  [513] 8.004404 8.000656 7.997732 8.007043 8.003667 7.997352 7.998131 7.997756\n#>  [521] 7.995282 8.004718 7.991869 8.003546 7.996525 8.000235 8.002709 7.994211\n#>  [529] 7.998404 7.996983 8.004857 7.995964 8.004478 8.002883 8.006113 8.000445\n#>  [537] 8.000411 7.996843 8.002260 8.006550 8.004431 8.007798 7.995154 7.995780\n#>  [545] 8.000181 7.997639 8.000036 7.996949 8.001420 7.999160 7.998435 7.999870\n#>  [553] 7.993954 7.994906 7.996048 8.000132 8.004589 7.998570 7.999110 7.996238\n#>  [561] 8.008304 7.994950 7.999382 8.002774 7.992517 7.999868 7.995892 8.005117\n#>  [569] 7.999459 8.000871 8.001053 7.997133 8.002531 8.000706 8.002327 8.001231\n#>  [577] 8.004061 8.003790 8.002874 8.001925 7.997674 8.003075 8.003406 7.999836\n#>  [585] 7.998636 8.004937 8.003245 8.006371 7.996203 8.008265 8.001406 8.006305\n#>  [593] 7.996528 7.996171 8.002439 8.004762 8.005898 8.003099 8.006997 7.997561\n#>  [601] 8.003071 8.005061 8.009180 8.008370 8.002236 8.005988 8.002944 7.993435\n#>  [609] 7.989781 8.001986 8.003254 7.998018 7.997713 7.992599 7.996921 8.001593\n#>  [617] 7.995437 8.004420 8.003690 7.993833 7.997836 7.998922 7.997041 7.994983\n#>  [625] 8.004370 7.996782 8.009106 7.999199 7.997822 7.998938 8.006677 8.004305\n#>  [633] 7.998599 7.997901 8.000693 7.995023 8.001790 7.998212 7.997626 8.002119\n#>  [641] 8.003201 8.005181 7.997687 8.002220 8.003466 8.004287 8.002447 8.001988\n#>  [649] 7.996489 7.998312 7.998246 8.000680 8.003872 8.004868 7.999776 8.001197\n#>  [657] 7.996760 7.996860 7.997146 8.000404 7.995321 7.994787 8.003267 7.998049\n#>  [665] 8.000142 8.000913 7.999112 7.995001 8.005443 7.993297 7.991542 7.997259\n#>  [673] 7.993371 7.998056 8.001568 7.996045 7.997616 7.993699 8.001760 7.997582\n#>  [681] 8.001847 8.001810 8.002698 7.998880 7.998725 8.000182 7.994555 8.001572\n#>  [689] 8.001251 7.996353 7.997603 8.002028 7.997016 7.997210 7.994927 7.999170\n#>  [697] 8.004991 7.994413 8.005345 7.996116 7.996278 8.000338 7.998387 8.004210\n#>  [705] 8.007738 7.999254 7.996258 7.994710 8.000046 7.990742 7.995527 8.001596\n#>  [713] 7.994164 7.998289 8.001826 8.002535 8.009212 8.005253 7.994529 8.004467\n#>  [721] 8.001880 7.989564 7.993773 7.997840 8.002789 7.992614 8.002112 7.993360\n#>  [729] 7.999926 7.993221 7.994239 7.998579 7.998314 7.998234 7.999980 7.995840\n#>  [737] 8.002690 7.996473 7.997026 8.000704 8.003601 8.000038 8.002979 8.005484\n#>  [745] 8.002258 7.994447 8.007497 8.003551 8.006858 7.999670 8.002979 8.000479\n#>  [753] 8.002552 7.997668 7.996479 7.995803 8.003704 7.991381 8.003545 7.994026\n#>  [761] 7.999245 7.996208 7.999535 8.003408 8.000391 8.000307 7.997313 8.008174\n#>  [769] 8.001498 8.002010 7.998776 7.995450 7.997541 7.999937 8.000285 8.000692\n#>  [777] 7.996358 8.005261 7.998186 7.999984 7.997740 8.001834 7.993615 7.996690\n#>  [785] 8.003602 7.993889 8.000223 7.994442 7.998086 7.994658 8.001552 7.999689\n#>  [793] 8.002120 7.996503 8.005401 7.997587 7.992330 8.001596 7.992068 7.998287\n#>  [801] 7.994289 8.001450 7.999839 7.999165 7.996463 7.999095 7.997869 8.001542\n#>  [809] 7.996383 7.991441 8.002700 8.006675 7.996638 8.000417 8.000514 8.007677\n#>  [817] 8.005820 7.999422 8.002189 7.993370 8.004422 8.002898 8.001308 7.992859\n#>  [825] 8.000487 8.004793 7.999257 7.993487 7.997622 8.005620 8.001325 7.988602\n#>  [833] 7.993631 7.998239 7.994204 7.999827 7.990601 8.001782 7.998730 7.991749\n#>  [841] 8.001076 8.004814 7.998220 8.004001 7.998881 8.004538 7.998918 8.003213\n#>  [849] 8.007598 7.997229 8.007260 7.994002 7.995289 7.997120 7.990966 7.998145\n#>  [857] 7.998041 8.007883 8.000120 7.998259 7.994149 7.999113 7.995124 7.997896\n#>  [865] 8.008872 7.997870 7.995206 7.996355 7.999184 8.005455 8.005962 7.992799\n#>  [873] 7.997977 8.001662 7.990687 7.997686 8.004168 7.996409 8.001091 8.002954\n#>  [881] 8.000296 7.996008 8.005612 8.003626 8.000004 8.006636 8.003056 7.991716\n#>  [889] 7.994458 7.998790 8.003017 7.994455 7.994972 7.996663 7.998724 8.002218\n#>  [897] 7.996508 7.998931 8.003908 7.998559 7.993541 7.999751 8.005113 7.999920\n#>  [905] 7.993684 7.999899 8.003778 7.996015 7.996129 8.004235 8.005589 7.996142\n#>  [913] 7.999885 8.003705 8.000914 7.999873 8.002889 8.002862 8.006699 8.003799\n#>  [921] 8.003929 7.998468 8.002643 8.006104 8.006845 7.996801 7.997976 8.000126\n#>  [929] 7.998160 8.004326 8.002240 8.002977 7.997451 7.999684 7.988356 8.002999\n#>  [937] 7.997677 7.998559 7.994866 8.000278 8.002432 8.004041 8.000219 8.003607\n#>  [945] 8.004106 8.006058 7.996897 7.992707 8.004363 8.003838 7.997327 8.009434\n#>  [953] 8.006149 7.996520 8.001484 7.993181 7.994546 7.990320 8.009053 7.997865\n#>  [961] 7.996973 7.996909 7.997002 8.002903 8.001588 7.996677 7.996053 7.996457\n#>  [969] 8.002106 7.998034 8.010395 7.997076 7.999059 8.003264 7.998366 7.997358\n#>  [977] 8.006635 7.997668 8.003086 8.008254 8.005506 8.007073 8.001908 8.001248\n#>  [985] 7.992828 7.996259 8.002501 8.005369 8.005316 7.999389 8.007009 8.000636\n#>  [993] 8.001717 8.004606 7.999654 7.999717 8.002558 8.001628 8.003330 8.004241\n```\n\n\n:::\n:::\n\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}