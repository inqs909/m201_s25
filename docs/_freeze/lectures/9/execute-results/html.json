{
  "hash": "a293f6979a5d217e1392856d35994eac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: 4/1/25\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Sampling Distributions\n\n- Distribution of a statistic over repeated samples\n\n- Different Samples yield different statistics\n\n::: notes\nIf we took many samples, the statistics (like means) would vary. Their distribution helps us quantify uncertainty.\n:::\n\n## Standard Error\n\nThe Standard Error (SE) is the standard deviation of a statistic itself.\n\n::: fragment\nSE tells us how much a statistic varies from sample to sample. Smaller SE = more precision.\n:::\n\n\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\nThe randomness effect is a sampling phenomenom where you will get different samples everytime you sample a population.\n\n::: fragment\n\nGetting different samples means you will get different statistics.\n\n:::\n\n\n::: fragment\n\nThese statistics will have a distribution on their own.\n\n::: \n\n## Randomness Effect 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n\n## Randomness Effect 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n\n## Randomness Effect 3\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n\n## Randomness Effect 4\n\n\n\n\n::: {.cell ecode-fold='true'}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n\n## Randomness Effect 5\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"12\",\"3\":\"Female\",\"4\":\"Black\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"4.868067\",\"8\":\"26.10229\",\"9\":\"117.9610\",\"10\":\"2\",\"11\":\"1.4148554\",\"12\":\"11051.34\",\"13\":\"31.43245\",\"14\":\"3.097657\",\"15\":\"953.2655\"},{\"1\":\"2\",\"2\":\"10\",\"3\":\"Male\",\"4\":\"White\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"5.015143\",\"8\":\"28.76681\",\"9\":\"118.5339\",\"10\":\"9\",\"11\":\"0.2934834\",\"12\":\"10990.18\",\"13\":\"40.23574\",\"14\":\"26.102676\",\"15\":\"945.7853\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"Agender\",\"4\":\"Brown\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"4.454633\",\"8\":\"29.66168\",\"9\":\"115.7489\",\"10\":\"4\",\"11\":\"3.8688546\",\"12\":\"10750.01\",\"13\":\"35.63008\",\"14\":\"16.488579\",\"15\":\"916.4359\"},{\"1\":\"4\",\"2\":\"14\",\"3\":\"Male\",\"4\":\"Silver\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"5.238566\",\"8\":\"25.17348\",\"9\":\"151.0876\",\"10\":\"6\",\"11\":\"0.1629299\",\"12\":\"11131.45\",\"13\":\"33.76716\",\"14\":\"-3.543489\",\"15\":\"963.6695\"},{\"1\":\"5\",\"2\":\"11\",\"3\":\"Non-binary\",\"4\":\"Black\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"5.175405\",\"8\":\"27.83145\",\"9\":\"120.7128\",\"10\":\"7\",\"11\":\"1.7064251\",\"12\":\"10998.54\",\"13\":\"29.17648\",\"14\":\"21.076437\",\"15\":\"947.5393\"},{\"1\":\"6\",\"2\":\"14\",\"3\":\"Female\",\"4\":\"Silver\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"5.420252\",\"8\":\"27.82232\",\"9\":\"144.1610\",\"10\":\"4\",\"11\":\"1.3371746\",\"12\":\"11121.41\",\"13\":\"36.15409\",\"14\":\"11.208490\",\"15\":\"962.0299\"},{\"1\":\"7\",\"2\":\"14\",\"3\":\"Male\",\"4\":\"Pink\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"5.300637\",\"8\":\"32.28241\",\"9\":\"111.5826\",\"10\":\"3\",\"11\":\"0.2214540\",\"12\":\"11079.32\",\"13\":\"33.21175\",\"14\":\"0.591026\",\"15\":\"956.9057\"},{\"1\":\"8\",\"2\":\"12\",\"3\":\"Non-binary\",\"4\":\"Black\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"5.328205\",\"8\":\"26.78104\",\"9\":\"144.5158\",\"10\":\"10\",\"11\":\"1.0573856\",\"12\":\"11050.70\",\"13\":\"41.01176\",\"14\":\"46.541699\",\"15\":\"953.7722\"},{\"1\":\"9\",\"2\":\"15\",\"3\":\"Male\",\"4\":\"White\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"5.027784\",\"8\":\"28.62948\",\"9\":\"107.7244\",\"10\":\"3\",\"11\":\"0.4733615\",\"12\":\"11123.27\",\"13\":\"33.07318\",\"14\":\"33.992340\",\"15\":\"962.7396\"},{\"1\":\"10\",\"2\":\"20\",\"3\":\"Agender\",\"4\":\"White\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.343392\",\"8\":\"26.60771\",\"9\":\"136.2290\",\"10\":\"9\",\"11\":\"0.6794670\",\"12\":\"11267.93\",\"13\":\"35.85236\",\"14\":\"30.272583\",\"15\":\"980.8823\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Unicorn Data Variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] -0.02052839\n```\n\n\n:::\n:::\n\n\n\n\n## Collecting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"963.0165\",\"2\":\"11125.56\"},{\"1\":\"928.1904\",\"2\":\"10848.63\"},{\"1\":\"921.0904\",\"2\":\"10789.97\"},{\"1\":\"952.1899\",\"2\":\"11038.96\"},{\"1\":\"946.6629\",\"2\":\"10996.33\"},{\"1\":\"969.6069\",\"2\":\"11177.39\"},{\"1\":\"919.2452\",\"2\":\"10776.14\"},{\"1\":\"928.7795\",\"2\":\"10853.12\"},{\"1\":\"930.7017\",\"2\":\"10870.12\"},{\"1\":\"951.4315\",\"2\":\"11028.63\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## DGP of Magical Score 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n\n## DGP of Magical Score 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3427.447         7.995\n```\n\n\n:::\n:::\n\n\n\n\n## Collecting a new sample\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3420.995         8.002\n```\n\n\n:::\n:::\n\n\n\n\n## Collecting a new sample\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3424.498         7.998\n```\n\n\n:::\n:::\n\n\n\n\n## Collecting a new sample\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3422.049         8.001\n```\n\n\n:::\n:::\n\n\n\n\n## Replicating Processes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nreplicate(N, CODE)\n```\n:::\n\n\n\n\n\n- `N`: number of times to repeat a process \n- `CODE`: what is to repeated\n\n\n## Extracting $\\hat \\beta$ Coefficeints\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nb(MODEL, INDEX)\n```\n:::\n\n\n\n\n\n- `MODEL`: a model that can be used to extract components\n- `INDEX`: which component do you want to use\n    - `0`: Intercept\n    - `1`: first slope\n    - `2`: second slope\n    - `...`\n\n\n\n## Collecting 1000 Samples\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(lm(Magical_Score ~ Nature_Score, unicorns(500)), 1))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 7.997632 7.997991 7.998313 8.001240 7.995315 8.001904 7.998877 8.000884\n#>    [9] 8.004513 7.994004 7.998884 7.999972 8.002184 8.007035 7.990211 7.993707\n#>   [17] 7.996064 7.999105 8.001524 8.000990 7.998822 8.000173 7.997829 8.004573\n#>   [25] 8.003037 7.994623 7.996811 7.994341 7.995896 7.998858 8.001211 8.001380\n#>   [33] 7.994521 8.000795 8.001994 7.999628 8.005461 8.005022 8.004779 7.997077\n#>   [41] 7.996466 7.998786 8.002236 8.000670 7.999901 7.995504 7.995391 7.996135\n#>   [49] 7.995058 8.001030 7.998628 8.006220 8.004327 8.000139 7.997487 7.995011\n#>   [57] 7.999462 7.997409 8.003891 7.997757 8.005654 8.000364 8.001224 8.001460\n#>   [65] 7.997232 7.999980 7.996626 7.993305 8.004015 8.005500 7.997155 7.998066\n#>   [73] 7.994468 7.995546 8.001601 7.999792 7.991261 8.000052 8.002325 7.996592\n#>   [81] 7.997234 8.003938 8.000648 7.999911 8.001573 8.002062 7.995522 8.000860\n#>   [89] 8.002080 7.998516 8.005041 7.996588 8.002593 8.003953 8.003344 8.004013\n#>   [97] 8.000579 8.001397 7.989768 8.000604 7.999746 7.999621 8.000390 7.990722\n#>  [105] 8.001206 8.004442 8.003553 7.997145 8.004399 8.005904 8.002679 8.000688\n#>  [113] 8.001036 7.992793 7.997595 8.000565 7.999792 7.998692 8.000178 8.001915\n#>  [121] 8.000520 7.997410 8.000869 8.002938 7.998961 7.997764 7.999482 7.997923\n#>  [129] 7.998568 8.000316 8.002184 7.993755 7.998149 8.002428 7.997807 7.998602\n#>  [137] 7.995664 8.001783 7.998465 7.991418 8.008901 7.995744 8.005698 8.003770\n#>  [145] 8.001356 8.000229 8.007533 7.995410 8.007421 8.001301 8.000581 7.996916\n#>  [153] 7.996796 7.994429 8.006515 7.995615 8.005645 7.999882 7.996875 8.004060\n#>  [161] 8.001877 7.993342 8.003987 8.003547 8.005892 7.998167 7.999365 8.001173\n#>  [169] 8.005663 8.002674 7.996723 8.000224 7.997127 7.993992 7.998085 8.000749\n#>  [177] 8.002087 8.005411 7.996130 7.995419 8.000196 7.996848 7.998802 8.003887\n#>  [185] 8.001192 7.996315 7.996958 7.995781 7.999735 7.999390 8.001352 8.008260\n#>  [193] 7.999908 7.999516 7.998022 8.001395 8.002117 8.004142 8.009295 8.002288\n#>  [201] 7.999406 7.992677 8.001016 8.009689 8.001298 7.998158 7.999456 7.997953\n#>  [209] 8.001007 8.000668 8.001845 8.002892 8.002304 7.999994 8.007042 8.001809\n#>  [217] 7.999995 7.997101 8.001664 8.000496 7.997758 8.001051 8.004977 8.001817\n#>  [225] 8.001159 7.997231 8.002456 7.999789 7.996748 7.996686 7.998973 8.001998\n#>  [233] 7.997369 8.007685 8.001897 8.005296 8.000780 7.993748 8.001021 7.999173\n#>  [241] 7.996548 8.007710 7.997935 7.995372 8.000373 7.998715 8.001714 7.998022\n#>  [249] 7.996228 8.002292 7.995358 8.001876 8.002586 7.994187 8.006756 7.998490\n#>  [257] 8.005728 7.994582 7.996680 7.999812 7.991980 7.998519 8.009793 7.996479\n#>  [265] 7.998855 8.003460 8.001306 8.003803 7.998812 8.004618 7.996986 7.999438\n#>  [273] 8.001394 7.992100 8.004374 7.995438 8.000504 7.996229 8.008469 7.998516\n#>  [281] 8.002244 7.995609 7.997142 8.000360 7.996050 8.000785 8.002780 8.001442\n#>  [289] 8.005977 8.002599 8.001257 8.003878 7.999126 7.997683 8.002033 8.009570\n#>  [297] 7.997712 7.997641 7.995195 7.996919 7.997046 8.005230 7.996316 7.999955\n#>  [305] 7.999015 7.996410 8.001020 7.993133 8.000715 8.005989 8.000184 8.001312\n#>  [313] 8.003210 8.001849 8.006486 7.997372 7.999987 7.997007 7.992363 8.003736\n#>  [321] 7.992069 7.995016 7.999823 7.997141 8.011768 8.003432 7.998501 8.003971\n#>  [329] 8.000479 7.999129 7.995160 7.994981 7.998561 7.994955 7.998409 8.007674\n#>  [337] 7.997888 7.994762 8.001930 8.006570 8.001950 7.999250 8.000284 7.995737\n#>  [345] 8.000319 8.006461 8.005864 8.000046 8.001012 7.999008 7.995284 8.006791\n#>  [353] 8.003115 7.994044 8.004631 7.995351 7.999128 7.995745 7.999280 7.997070\n#>  [361] 8.007538 7.997331 7.995013 8.005322 8.000991 7.999362 8.006051 7.997122\n#>  [369] 8.004996 8.000992 7.997716 8.003837 8.000059 8.002150 8.007346 7.993704\n#>  [377] 8.001270 7.999525 8.003832 7.993223 7.998136 7.996540 8.001663 8.009955\n#>  [385] 8.007838 7.990166 7.994759 7.992888 7.997279 7.996033 7.996287 8.002078\n#>  [393] 7.993917 8.001540 8.002114 7.999042 8.001065 7.996678 8.002962 8.004150\n#>  [401] 8.002093 8.000925 7.995199 8.010969 7.999600 8.003938 7.997072 8.004924\n#>  [409] 7.999060 8.002159 8.000991 7.999277 7.997814 7.999464 8.002479 7.998212\n#>  [417] 8.002141 8.001678 7.995584 7.997144 8.000004 8.000549 7.999444 7.998909\n#>  [425] 8.004682 7.998966 7.998172 8.003782 7.994302 8.003089 8.000923 7.998558\n#>  [433] 7.998431 7.993781 7.996412 8.000274 7.998830 7.995294 8.002627 7.999700\n#>  [441] 7.996207 7.996780 8.003381 8.002402 8.001564 7.998173 7.994030 8.003207\n#>  [449] 7.997798 8.008855 7.998953 7.995520 7.997805 8.007508 8.004622 7.996270\n#>  [457] 7.992690 7.996084 7.999052 7.995728 7.997300 7.996292 8.000436 7.994991\n#>  [465] 7.996887 8.000965 8.001502 8.001619 7.997019 7.999044 8.001335 8.003610\n#>  [473] 7.993896 8.007574 7.997126 8.005446 7.998837 7.999002 8.000315 8.000073\n#>  [481] 8.000161 8.002095 8.001807 8.002282 8.000176 8.000345 7.999298 7.999235\n#>  [489] 7.995719 7.998441 7.997762 8.000042 7.996234 8.000816 8.001066 7.998683\n#>  [497] 7.997838 7.996375 8.001729 7.994191 8.000080 7.996549 8.007487 8.001098\n#>  [505] 7.998409 7.996250 8.003333 7.994521 7.996367 8.005768 7.998474 8.001629\n#>  [513] 7.999606 7.996648 7.995719 7.994631 8.002401 7.997761 7.997335 7.997079\n#>  [521] 7.996777 7.997916 7.998305 8.002712 7.999604 7.996699 8.000274 7.998648\n#>  [529] 7.997107 7.996326 7.999680 7.999334 7.994539 7.998234 8.007180 8.000673\n#>  [537] 7.994288 8.004812 8.003099 7.998644 8.002055 8.000974 7.993440 8.002863\n#>  [545] 7.998995 7.997504 7.998536 7.994636 8.003994 8.002990 8.001766 7.998984\n#>  [553] 7.997173 8.008615 7.997733 7.997579 8.001019 8.006172 8.002001 8.008265\n#>  [561] 8.001061 7.997695 7.998353 8.003952 8.000652 8.001701 8.003572 8.003257\n#>  [569] 7.994804 8.003175 8.001382 8.002706 8.002183 7.998026 7.999154 7.999352\n#>  [577] 7.999665 8.005176 7.990227 8.000597 8.003215 8.003437 8.001498 8.003144\n#>  [585] 7.998229 7.999660 8.000639 8.008070 7.999598 8.005468 7.996505 8.001329\n#>  [593] 7.999332 7.997065 7.999929 7.993784 8.005830 8.003127 8.004573 8.000348\n#>  [601] 8.008174 7.995726 8.000811 7.994207 7.999449 8.001372 8.003679 7.998705\n#>  [609] 8.003276 7.994131 8.001830 8.004065 7.998571 7.998798 7.998681 8.008508\n#>  [617] 7.996200 8.001367 7.994609 7.994972 8.000584 8.003002 8.000861 8.003866\n#>  [625] 7.999803 7.996106 8.000713 8.002230 7.999500 8.003769 7.998189 7.999470\n#>  [633] 8.000123 7.999831 8.004364 7.994750 8.001197 8.006599 7.988337 7.999657\n#>  [641] 7.999800 8.000910 7.995230 7.996065 8.002178 7.995075 8.004038 7.998311\n#>  [649] 8.002365 7.999756 8.001890 8.003768 7.999474 7.987866 8.006968 7.993527\n#>  [657] 7.992659 8.000325 7.997782 8.001551 8.002617 8.003518 7.996489 8.004587\n#>  [665] 8.001517 7.997979 7.995782 8.002379 8.009516 8.004607 7.991440 7.997555\n#>  [673] 7.999216 8.000457 8.002379 8.000499 7.990635 7.996781 8.005982 7.999255\n#>  [681] 7.995245 7.999438 7.998389 8.003766 8.001695 7.999247 8.000565 7.996656\n#>  [689] 7.996845 7.998076 8.004370 7.998120 8.002890 7.996849 8.000053 8.001132\n#>  [697] 8.009077 8.008402 8.003318 7.998344 8.002449 7.997960 7.995285 7.998982\n#>  [705] 7.995422 8.008223 7.995216 7.997825 8.000483 7.999852 7.999423 8.002478\n#>  [713] 8.001344 7.994678 7.990713 8.003834 7.998299 7.996946 7.994607 8.000328\n#>  [721] 7.996110 8.003888 7.998335 7.999073 8.000441 8.002857 7.998523 8.000739\n#>  [729] 7.995230 7.995479 7.994644 8.001809 7.990181 8.005391 7.999380 7.997808\n#>  [737] 8.002257 7.995072 7.999083 7.999359 8.001288 8.004255 7.997668 8.005375\n#>  [745] 8.004211 7.999743 8.005616 7.998952 7.997841 8.005883 7.997368 7.999721\n#>  [753] 7.992488 7.997812 7.999340 8.000893 7.992655 7.997732 8.001234 7.996200\n#>  [761] 7.999748 7.997889 8.003297 8.008962 8.005601 8.003723 7.996326 8.001638\n#>  [769] 7.994808 7.998551 8.004422 7.998065 8.000909 8.002278 7.997642 8.000182\n#>  [777] 7.997340 7.996924 7.999020 8.003074 7.996943 7.997708 8.000464 8.001145\n#>  [785] 7.998896 7.996108 8.000341 8.003032 8.004444 8.007393 7.996749 8.000608\n#>  [793] 7.996521 8.004650 8.004262 8.009847 7.996171 7.995686 7.996880 8.003229\n#>  [801] 7.994508 8.003067 7.995363 8.003659 7.997500 7.998886 7.998746 8.004563\n#>  [809] 8.001324 7.994619 8.005400 7.998783 8.001472 8.000791 7.998021 8.003976\n#>  [817] 7.998469 8.001588 7.996509 8.007386 7.999824 8.000333 7.999085 8.002929\n#>  [825] 7.995887 8.004226 7.998790 7.997323 7.999113 7.994575 7.998476 7.998158\n#>  [833] 8.001913 8.007543 8.002278 8.009369 7.994321 8.000223 8.009645 7.996227\n#>  [841] 7.994862 7.996213 7.994047 8.004346 7.993120 8.007185 7.998158 8.005241\n#>  [849] 8.006997 7.995658 7.996866 8.000384 7.997144 8.001407 7.997994 7.999099\n#>  [857] 7.999396 8.007558 8.005803 7.997356 7.998743 8.014076 8.000982 7.996391\n#>  [865] 7.989113 8.002935 8.002252 8.003984 7.992276 7.994938 8.001932 8.000250\n#>  [873] 7.998719 7.997118 7.999218 8.003559 7.998347 8.003086 8.000969 7.998884\n#>  [881] 8.001633 7.999580 7.998489 7.999047 7.991872 7.996039 8.001938 8.005591\n#>  [889] 8.004580 7.998989 8.002732 7.998494 7.994115 8.005956 8.002765 8.002380\n#>  [897] 7.993191 8.003226 8.000900 7.992528 7.998691 7.994608 8.002224 8.004165\n#>  [905] 8.002920 7.993480 8.002642 8.002140 7.999405 8.003939 7.990446 8.001872\n#>  [913] 8.000107 7.998172 8.000905 8.000465 8.001978 7.997166 7.992303 8.001303\n#>  [921] 7.997530 8.003449 8.002642 7.995629 7.997961 8.005773 8.002240 8.001213\n#>  [929] 8.000372 8.000279 7.994696 8.004001 7.998116 7.999590 8.000780 8.000737\n#>  [937] 7.999731 8.001566 7.996633 7.992785 7.997424 7.996533 7.996289 8.005493\n#>  [945] 8.002652 8.001489 8.000887 7.991953 7.999821 7.990551 7.997725 8.003789\n#>  [953] 8.005503 7.998506 7.999595 7.996863 8.001345 7.998051 7.997424 8.003695\n#>  [961] 7.996422 7.998953 7.993464 8.004175 8.006037 8.001828 7.997440 7.995781\n#>  [969] 7.999212 7.996047 7.999232 7.997678 7.999144 8.000991 7.999227 7.998431\n#>  [977] 8.003954 8.004121 7.987809 8.005990 8.002811 7.998413 8.001371 8.007867\n#>  [985] 8.004962 7.997512 7.995998 7.997973 7.996137 8.000418 7.999125 8.002964\n#>  [993] 7.990908 8.002621 7.996534 7.996232 7.998360 7.995406 8.004237 7.995312\n```\n\n\n:::\n:::\n\n\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}