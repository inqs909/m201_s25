{
  "hash": "c402d2ea276e6a2092de590ddb330c8d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: 4/1/25\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Sampling Distributions\n\n- Distribution of a statistic over repeated samples\n\n- Different Samples yield different statistics\n\n::: notes\nIf we took many samples, the statistics (like means) would vary. Their distribution helps us quantify uncertainty.\n:::\n\n## Standard Error\n\nThe Standard Error (SE) is the standard deviation of a statistic itself.\n\n::: fragment\nSE tells us how much a statistic varies from sample to sample. Smaller SE = more precision.\n:::\n\n\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\nThe randomness effect is a sampling phenomenom where you will get different samples everytime you sample a population.\n\n::: fragment\n\nGetting different samples means you will get different statistics.\n\n:::\n\n\n::: fragment\n\nThese statistics will have a distribution on their own.\n\n::: \n\n## Randomness Effect 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 3\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 4\n\n\n\n::: {.cell ecode-fold='true'}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 5\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"10\",\"3\":\"Female\",\"4\":\"Silver\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.482617\",\"8\":\"28.26257\",\"9\":\"114.13573\",\"10\":\"1\",\"11\":\"0.11954548\",\"12\":\"10967.52\",\"13\":\"35.76686\",\"14\":\"12.711764\",\"15\":\"943.0898\"},{\"1\":\"2\",\"2\":\"6\",\"3\":\"Male\",\"4\":\"Silver\",\"5\":\"Ember\",\"6\":\"Aquamarine\",\"7\":\"5.706497\",\"8\":\"28.80158\",\"9\":\"152.49541\",\"10\":\"8\",\"11\":\"0.08349706\",\"12\":\"10864.57\",\"13\":\"34.42242\",\"14\":\"26.973457\",\"15\":\"930.2196\"},{\"1\":\"3\",\"2\":\"11\",\"3\":\"Agender\",\"4\":\"Brown\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"5.141903\",\"8\":\"27.49034\",\"9\":\"98.89708\",\"10\":\"10\",\"11\":\"1.12762473\",\"12\":\"11011.83\",\"13\":\"30.08778\",\"14\":\"22.245250\",\"15\":\"948.7012\"},{\"1\":\"4\",\"2\":\"13\",\"3\":\"Agender\",\"4\":\"Silver\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"5.400569\",\"8\":\"31.53013\",\"9\":\"137.37230\",\"10\":\"3\",\"11\":\"2.30260649\",\"12\":\"11054.92\",\"13\":\"37.40669\",\"14\":\"-10.213343\",\"15\":\"953.7731\"},{\"1\":\"5\",\"2\":\"8\",\"3\":\"Non-binary\",\"4\":\"Gray\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"4.988711\",\"8\":\"28.11014\",\"9\":\"109.71256\",\"10\":\"2\",\"11\":\"0.37938768\",\"12\":\"10902.41\",\"13\":\"37.80063\",\"14\":\"-1.677455\",\"15\":\"934.8997\"},{\"1\":\"6\",\"2\":\"13\",\"3\":\"Genderfluid\",\"4\":\"Pink\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"4.929056\",\"8\":\"24.79386\",\"9\":\"149.50054\",\"10\":\"3\",\"11\":\"0.29052586\",\"12\":\"11083.27\",\"13\":\"39.80657\",\"14\":\"4.096078\",\"15\":\"957.4531\"},{\"1\":\"7\",\"2\":\"20\",\"3\":\"Agender\",\"4\":\"Pink\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"5.685568\",\"8\":\"27.41071\",\"9\":\"151.17405\",\"10\":\"6\",\"11\":\"0.14985849\",\"12\":\"11211.04\",\"13\":\"32.26911\",\"14\":\"12.486263\",\"15\":\"973.4821\"},{\"1\":\"8\",\"2\":\"9\",\"3\":\"Female\",\"4\":\"Silver\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"5.173574\",\"8\":\"28.55030\",\"9\":\"142.46430\",\"10\":\"5\",\"11\":\"1.39357208\",\"12\":\"10953.05\",\"13\":\"34.06769\",\"14\":\"50.910773\",\"15\":\"941.2471\"},{\"1\":\"9\",\"2\":\"19\",\"3\":\"Agender\",\"4\":\"White\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"5.428818\",\"8\":\"29.17009\",\"9\":\"141.12516\",\"10\":\"4\",\"11\":\"0.70325360\",\"12\":\"11267.87\",\"13\":\"39.05711\",\"14\":\"56.824904\",\"15\":\"980.2064\"},{\"1\":\"10\",\"2\":\"16\",\"3\":\"Male\",\"4\":\"Gray\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"4.880655\",\"8\":\"30.97713\",\"9\":\"107.45386\",\"10\":\"5\",\"11\":\"2.39554200\",\"12\":\"11172.54\",\"13\":\"34.66346\",\"14\":\"18.304101\",\"15\":\"968.5789\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## Unicorn Data Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] -2.619272\n```\n\n\n:::\n:::\n\n\n\n## Collecting\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"940.8762\",\"2\":\"10950.94\"},{\"1\":\"954.4973\",\"2\":\"11057.85\"},{\"1\":\"921.5463\",\"2\":\"10794.90\"},{\"1\":\"962.7944\",\"2\":\"11124.08\"},{\"1\":\"979.6226\",\"2\":\"11261.67\"},{\"1\":\"956.7654\",\"2\":\"11076.74\"},{\"1\":\"950.4628\",\"2\":\"11025.90\"},{\"1\":\"941.3633\",\"2\":\"10954.25\"},{\"1\":\"916.7689\",\"2\":\"10757.66\"},{\"1\":\"941.7560\",\"2\":\"10954.78\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## DGP of Magical Score 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n## DGP of Magical Score 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3423.763         7.999\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3424.813         7.998\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3416.482         8.007\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3424.032         7.999\n```\n\n\n:::\n:::\n\n\n\n## Replicating Processes\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nreplicate(N, CODE)\n```\n:::\n\n\n\n\n- `N`: number of times to repeat a process\n- `CODE`: what is to repeated\n\n\n## Collecting 1000 Samples\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(Magical_Score ~ Nature_Score, 1, unicorns(500)))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 7.998612 7.991189 8.001086 7.995556 7.995226 7.998939 8.004289 7.998916\n#>    [9] 8.001085 7.995950 7.993444 8.010429 8.000558 7.995607 8.001616 8.002121\n#>   [17] 7.996728 7.996199 8.002526 8.004770 8.004546 8.001733 8.005942 8.003975\n#>   [25] 8.003046 8.001145 7.999263 7.998737 7.997320 7.996814 7.995840 8.003617\n#>   [33] 7.999637 7.996893 7.996159 7.995162 8.001753 7.999084 7.998362 8.000682\n#>   [41] 7.999359 7.996885 8.005114 8.006767 8.002737 7.995692 8.001913 7.995205\n#>   [49] 7.998472 8.000722 8.005754 8.001054 8.001822 8.004725 7.999900 8.003639\n#>   [57] 7.997118 8.005363 8.001267 8.006771 7.996414 7.998941 8.001038 8.004844\n#>   [65] 7.996226 7.997848 8.002940 8.007187 8.005015 8.003093 7.997059 7.999659\n#>   [73] 8.000762 7.997904 7.999158 8.001776 8.002632 7.996585 8.003281 8.002722\n#>   [81] 8.000265 7.999162 7.998912 8.005949 7.996780 8.003612 8.002654 7.999361\n#>   [89] 8.004321 8.003955 7.997191 8.000207 7.995221 8.002053 7.994659 7.998566\n#>   [97] 7.997447 7.997057 8.002358 7.995497 7.994585 8.000095 7.997457 8.003789\n#>  [105] 7.998666 8.001892 7.998158 8.001753 8.003696 8.000149 8.004734 8.000158\n#>  [113] 8.001283 8.008284 8.007749 8.001379 7.993576 8.003759 8.001305 8.002016\n#>  [121] 7.999507 7.997676 7.993445 7.991975 7.998855 8.002271 7.999046 8.002398\n#>  [129] 8.005682 7.999235 8.004511 8.004379 8.000680 8.003220 7.997779 8.000839\n#>  [137] 7.997812 7.997762 8.001363 8.001930 8.003708 7.993470 8.000297 8.000754\n#>  [145] 8.007699 7.994583 7.997489 8.002496 7.999697 8.001288 8.008429 7.999919\n#>  [153] 8.004904 8.000803 8.005462 7.996313 8.003923 8.003120 8.002637 8.004704\n#>  [161] 8.002300 8.008480 8.003679 7.996857 8.001629 7.998882 8.002907 7.995626\n#>  [169] 8.004066 8.001262 8.000717 7.996341 8.002506 7.997074 8.002778 7.997601\n#>  [177] 7.999252 7.996832 7.999833 7.998494 8.002063 8.005956 7.998998 8.005160\n#>  [185] 8.002461 7.996980 8.002465 8.006245 8.000307 8.001718 8.001432 8.001652\n#>  [193] 8.001611 8.002119 7.993938 7.999965 7.998341 8.001195 8.000102 8.003263\n#>  [201] 7.995876 8.003451 8.002857 8.002756 8.005375 7.996440 8.005358 7.992160\n#>  [209] 7.998080 8.000021 8.000098 7.999589 7.999920 7.997631 8.002244 7.996160\n#>  [217] 7.998851 7.995242 7.997522 8.002834 8.001514 8.006691 7.997261 7.994369\n#>  [225] 7.991902 7.997770 7.999873 8.003416 8.006161 7.993721 8.006988 8.004316\n#>  [233] 7.994747 8.001297 7.997407 7.996599 7.997814 8.002900 7.998405 7.999990\n#>  [241] 7.994571 7.996187 7.995910 7.997223 7.991694 8.000047 7.992445 7.995671\n#>  [249] 7.994561 7.999648 7.995769 7.993745 8.001084 8.000871 7.997833 8.001612\n#>  [257] 8.000616 7.998199 7.996465 7.997938 7.994906 8.001309 8.004409 7.996568\n#>  [265] 8.000139 8.000568 8.007272 8.001529 7.995476 8.000962 7.995356 7.994342\n#>  [273] 8.004031 8.002620 7.996337 8.005019 7.996500 7.999009 8.000512 8.002057\n#>  [281] 8.007827 8.001951 7.999434 7.998682 8.002104 7.998546 7.998196 7.996762\n#>  [289] 7.995951 7.998306 8.005070 7.996431 7.999803 8.004912 8.001607 8.003573\n#>  [297] 8.002134 7.990413 7.998910 8.000021 8.002776 7.996257 7.991426 8.007543\n#>  [305] 8.004423 7.996813 8.002111 8.004891 7.995144 8.002299 7.998679 8.001737\n#>  [313] 7.994475 7.992762 8.004318 7.996498 7.996784 7.994794 8.001657 7.999456\n#>  [321] 8.002027 7.997741 7.996726 7.998345 7.999935 8.005765 7.997285 7.996619\n#>  [329] 8.003471 7.998405 7.994759 7.999601 7.998914 7.997865 8.002696 7.997983\n#>  [337] 8.001798 8.002947 8.004242 8.004445 7.995956 8.005210 7.992458 8.000989\n#>  [345] 8.001498 7.996488 8.002851 7.996747 8.004446 7.995000 7.999855 7.998997\n#>  [353] 7.999390 8.003761 7.990151 7.998047 7.998810 8.001268 7.997050 8.007314\n#>  [361] 7.996448 8.002541 8.003978 7.994988 7.996316 8.006146 8.000708 7.997549\n#>  [369] 7.996764 7.998818 8.004566 7.996593 7.996142 8.006154 7.999908 8.001241\n#>  [377] 7.996593 8.004368 8.004744 7.987431 7.996258 7.996567 7.997879 8.008357\n#>  [385] 7.995504 7.997131 8.001763 8.003668 8.002103 7.993045 7.997509 8.000715\n#>  [393] 7.997148 7.999715 8.004094 8.000227 8.003739 7.998762 7.995840 7.994942\n#>  [401] 8.002828 7.998509 8.004087 7.993609 7.995348 8.000234 8.004731 7.999716\n#>  [409] 8.003041 7.999670 7.999527 8.004862 7.998061 7.992530 7.997254 7.998038\n#>  [417] 7.994895 8.008171 8.001543 8.001291 7.998090 7.998121 8.004464 7.998442\n#>  [425] 7.998533 7.998723 8.002149 7.992302 8.005557 7.995430 7.999527 7.998627\n#>  [433] 8.000474 8.002110 7.996549 8.003338 8.001349 8.001583 8.003731 8.000524\n#>  [441] 8.001752 7.997771 7.996253 8.008633 7.998280 7.993921 8.003400 7.999353\n#>  [449] 8.005488 8.003319 7.996343 8.004794 8.003296 8.000356 8.008983 7.998319\n#>  [457] 7.999480 7.998433 8.004141 8.004038 8.001144 8.003861 7.997824 8.002555\n#>  [465] 7.999436 7.997500 8.004100 8.000366 8.009480 8.009461 8.001908 8.006531\n#>  [473] 8.002582 8.003679 8.000561 7.995474 7.998373 7.990755 8.003075 8.005956\n#>  [481] 7.993253 8.002591 8.003301 8.001195 8.008436 7.998007 7.997286 8.002122\n#>  [489] 7.995766 7.993594 8.004453 7.998235 8.001019 7.995485 8.000247 8.000630\n#>  [497] 7.993779 8.003272 8.000924 7.990087 8.007307 7.996444 8.004348 7.998987\n#>  [505] 8.000743 7.998150 7.995617 7.996399 7.999333 7.997742 7.998520 8.002577\n#>  [513] 8.002887 7.995836 7.993872 7.999099 8.001982 7.996262 8.002967 7.995901\n#>  [521] 7.999101 7.989383 7.998714 7.999469 8.007793 8.003604 8.001681 8.005062\n#>  [529] 7.998247 7.996377 8.000177 8.002016 7.998625 7.997188 8.002911 8.002075\n#>  [537] 7.995043 8.000714 7.997784 8.003701 8.000687 7.995923 8.003617 8.001682\n#>  [545] 7.999887 8.002216 7.998414 7.997427 7.992147 8.000585 8.003972 7.996876\n#>  [553] 7.999476 8.001013 7.999137 7.999246 8.003369 7.999263 7.995675 7.995124\n#>  [561] 8.001129 8.003161 8.001661 8.005774 8.007086 7.997328 7.996428 7.999485\n#>  [569] 8.005114 7.998584 7.998954 8.000899 7.997227 7.999168 7.996248 8.005403\n#>  [577] 7.996264 8.000444 7.997218 8.006435 8.000694 7.994794 7.999199 7.996375\n#>  [585] 7.998069 7.994045 7.998986 7.995980 7.999516 7.997356 7.993950 7.997234\n#>  [593] 7.999351 7.999421 7.997109 8.008467 7.999747 7.996579 8.000586 8.000961\n#>  [601] 8.001409 8.004600 8.001317 7.998654 7.997916 8.004881 7.999855 7.999048\n#>  [609] 7.999936 7.996464 8.000916 7.999374 8.001795 7.996291 7.998366 8.004480\n#>  [617] 8.000989 8.003528 7.997299 8.001544 8.001992 8.004227 7.998429 8.003844\n#>  [625] 8.001669 7.997762 8.007971 7.998007 8.006437 8.001339 8.007273 8.007903\n#>  [633] 7.999331 8.003131 7.998317 8.001412 8.000594 8.002820 7.999181 8.005787\n#>  [641] 8.004776 8.002602 8.005491 8.002333 7.998457 7.998262 8.002950 8.004309\n#>  [649] 8.008731 8.002287 8.006069 7.994157 8.006767 7.995694 7.999679 7.994901\n#>  [657] 7.997436 7.998986 8.000344 8.010884 8.003075 7.997579 7.994712 8.000197\n#>  [665] 8.000653 7.994635 8.000380 8.001283 8.002062 7.992280 8.009130 7.997582\n#>  [673] 7.998402 7.998307 7.999199 7.995973 7.997276 7.995649 7.996081 8.003216\n#>  [681] 8.000480 8.002327 7.992965 8.000290 7.999547 8.002551 7.995652 7.995333\n#>  [689] 8.003449 7.997824 7.992608 8.005687 8.001608 7.995173 8.001275 8.002894\n#>  [697] 7.998919 8.003653 8.003499 8.001908 7.999119 7.992290 8.000757 8.000246\n#>  [705] 8.004621 7.992756 8.006083 7.994570 8.009105 8.001335 7.999760 8.001464\n#>  [713] 8.005618 7.995253 8.009657 7.995108 8.000497 8.006992 8.003143 8.001609\n#>  [721] 7.996314 8.002574 8.003159 7.997337 7.993836 8.002888 7.998479 7.996698\n#>  [729] 8.004271 8.003058 7.999941 7.997163 8.002257 7.995207 8.002546 8.002360\n#>  [737] 8.002853 7.996939 7.999777 8.001765 8.002191 8.002633 8.006259 8.000050\n#>  [745] 8.003459 8.004512 8.004100 8.001806 7.997638 7.998104 8.002646 8.001005\n#>  [753] 8.006233 8.001920 7.998064 8.002083 7.994682 8.004980 7.995122 7.997770\n#>  [761] 7.999316 7.999643 7.996498 8.003798 8.002718 8.000874 7.992060 8.001530\n#>  [769] 7.994483 7.999267 8.003019 7.995749 8.004756 7.994398 7.997244 7.998603\n#>  [777] 7.991176 8.000375 7.994262 8.003903 7.997699 8.002564 7.999544 7.994332\n#>  [785] 7.999968 8.001006 8.006935 8.000464 8.000617 7.995449 8.002315 8.003309\n#>  [793] 8.006204 8.006669 8.005729 8.001370 7.999932 8.004907 7.998229 7.990686\n#>  [801] 8.000462 8.008585 7.999346 8.003071 7.998190 7.994541 8.000247 7.995514\n#>  [809] 7.999004 7.993263 7.999864 7.998423 8.005002 7.994887 8.000369 8.000226\n#>  [817] 7.999217 7.994351 8.000474 7.989974 7.999139 8.001042 8.004142 8.003684\n#>  [825] 8.001325 7.995182 7.996448 7.996886 7.993351 8.003450 8.003495 7.998128\n#>  [833] 7.997515 8.004553 7.992248 7.998855 7.998235 7.998001 7.996561 7.997516\n#>  [841] 8.001921 8.005078 8.001289 7.995799 8.001952 7.996474 8.002929 7.997686\n#>  [849] 8.000447 7.999275 7.997908 8.011348 8.001933 7.998695 8.001893 7.999294\n#>  [857] 7.996087 8.001816 7.997473 7.995370 8.004406 8.003470 7.992771 7.994274\n#>  [865] 8.002594 8.004598 8.004755 8.004638 8.000350 7.999534 8.000859 8.000112\n#>  [873] 8.003841 7.996679 8.000302 8.002596 7.998219 7.992837 8.003570 8.002289\n#>  [881] 7.998623 7.996735 7.999707 7.997908 7.995381 7.991950 8.002619 8.003743\n#>  [889] 7.998615 8.006924 8.004581 8.002865 8.003029 8.001205 7.997261 8.000133\n#>  [897] 7.999291 8.005046 8.002311 7.999332 7.998193 8.004212 7.994698 7.999623\n#>  [905] 7.997062 7.995992 8.001354 8.004639 7.999085 7.995309 8.002591 7.996527\n#>  [913] 7.999668 8.000415 8.000545 7.996067 7.999928 8.001157 7.994356 8.000203\n#>  [921] 7.995225 8.002672 7.995866 7.990046 8.000510 8.003896 8.005586 7.998297\n#>  [929] 8.000082 7.996122 8.000021 7.993934 7.998965 7.997111 8.000992 7.998293\n#>  [937] 7.993707 7.999280 8.001329 7.997343 7.995020 8.001291 8.006574 7.999291\n#>  [945] 8.006357 8.002771 7.993880 7.992329 8.002711 8.002010 7.996093 8.001186\n#>  [953] 7.999048 8.004966 7.999300 8.000979 8.000463 8.002209 8.003042 7.997589\n#>  [961] 8.001176 7.998110 7.997431 7.996430 8.003497 8.007852 8.002236 8.005216\n#>  [969] 8.000422 8.000519 8.008318 8.002971 7.998688 8.001632 7.999608 8.001243\n#>  [977] 8.003790 7.993049 8.000932 7.995539 7.993393 7.998457 7.997107 7.999349\n#>  [985] 8.004481 7.994703 8.004407 8.001784 7.997049 7.999310 8.001130 7.999515\n#>  [993] 7.994576 8.003974 8.001078 7.999908 7.994256 7.994815 7.994923 7.998233\n```\n\n\n:::\n:::\n\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}