{
  "hash": "51bfc222ea1687f0ec41d4431a7618fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: 4/1/25\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Sampling Distributions\n\n- Distribution of a statistic over repeated samples\n\n- Different Samples yield different statistics\n\n::: notes\nIf we took many samples, the statistics (like means) would vary. Their distribution helps us quantify uncertainty.\n:::\n\n## Standard Error\n\nThe Standard Error (SE) is the standard deviation of a statistic itself.\n\n::: fragment\nSE tells us how much a statistic varies from sample to sample. Smaller SE = more precision.\n:::\n\n\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\nThe randomness effect is a sampling phenomenom where you will get different samples everytime you sample a population.\n\n::: fragment\n\nGetting different samples means you will get different statistics.\n\n:::\n\n\n::: fragment\n\nThese statistics will have a distribution on their own.\n\n::: \n\n## Randomness Effect 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 3\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 4\n\n\n\n::: {.cell ecode-fold='true'}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 5\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"5\",\"3\":\"Agender\",\"4\":\"Silver\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"5.117602\",\"8\":\"30.97095\",\"9\":\"122.07207\",\"10\":\"4\",\"11\":\"0.1268784\",\"12\":\"10839.44\",\"13\":\"37.71306\",\"14\":\"64.627250\",\"15\":\"926.9495\"},{\"1\":\"2\",\"2\":\"18\",\"3\":\"Non-binary\",\"4\":\"Gray\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"4.967125\",\"8\":\"27.94532\",\"9\":\"122.43841\",\"10\":\"8\",\"11\":\"0.1535380\",\"12\":\"11228.10\",\"13\":\"35.02209\",\"14\":\"73.504404\",\"15\":\"975.4550\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"Male\",\"4\":\"Silver\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.893250\",\"8\":\"30.32957\",\"9\":\"120.57911\",\"10\":\"3\",\"11\":\"1.8159736\",\"12\":\"10730.71\",\"13\":\"33.95199\",\"14\":\"7.791478\",\"15\":\"913.1560\"},{\"1\":\"4\",\"2\":\"12\",\"3\":\"Genderfluid\",\"4\":\"Silver\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"5.315348\",\"8\":\"26.63196\",\"9\":\"144.48329\",\"10\":\"5\",\"11\":\"1.4775478\",\"12\":\"11027.89\",\"13\":\"37.25289\",\"14\":\"16.588979\",\"15\":\"950.6894\"},{\"1\":\"5\",\"2\":\"15\",\"3\":\"Genderfluid\",\"4\":\"White\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"4.709877\",\"8\":\"27.24143\",\"9\":\"133.99513\",\"10\":\"9\",\"11\":\"1.9211614\",\"12\":\"11090.75\",\"13\":\"40.69813\",\"14\":\"6.751951\",\"15\":\"958.3057\"},{\"1\":\"6\",\"2\":\"20\",\"3\":\"Agender\",\"4\":\"Pink\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"5.160234\",\"8\":\"30.74521\",\"9\":\"94.17078\",\"10\":\"1\",\"11\":\"1.2346210\",\"12\":\"11237.04\",\"13\":\"37.18075\",\"14\":\"75.520478\",\"15\":\"976.9545\"},{\"1\":\"7\",\"2\":\"5\",\"3\":\"Non-binary\",\"4\":\"Pink\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"5.126965\",\"8\":\"29.08457\",\"9\":\"90.20951\",\"10\":\"9\",\"11\":\"0.2949568\",\"12\":\"10814.25\",\"13\":\"36.28623\",\"14\":\"-21.749853\",\"15\":\"923.8907\"},{\"1\":\"8\",\"2\":\"14\",\"3\":\"Female\",\"4\":\"Silver\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"4.875817\",\"8\":\"25.89424\",\"9\":\"167.86759\",\"10\":\"4\",\"11\":\"3.3721878\",\"12\":\"11037.23\",\"13\":\"32.57412\",\"14\":\"16.357034\",\"15\":\"952.0856\"},{\"1\":\"9\",\"2\":\"4\",\"3\":\"Non-binary\",\"4\":\"Brown\",\"5\":\"Jewel\",\"6\":\"Aquamarine\",\"7\":\"5.046735\",\"8\":\"27.11218\",\"9\":\"150.12428\",\"10\":\"4\",\"11\":\"0.8126782\",\"12\":\"10825.83\",\"13\":\"37.44534\",\"14\":\"1.936211\",\"15\":\"925.2990\"},{\"1\":\"10\",\"2\":\"10\",\"3\":\"Agender\",\"4\":\"Black\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.765881\",\"8\":\"24.58601\",\"9\":\"98.27315\",\"10\":\"7\",\"11\":\"1.1636285\",\"12\":\"10968.88\",\"13\":\"28.72021\",\"14\":\"34.218164\",\"15\":\"943.5244\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## Unicorn Data Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.087916\n```\n\n\n:::\n:::\n\n\n\n## Collecting\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"949.1093\",\"2\":\"11019.00\"},{\"1\":\"966.8218\",\"2\":\"11160.51\"},{\"1\":\"954.0742\",\"2\":\"11058.35\"},{\"1\":\"962.0431\",\"2\":\"11116.97\"},{\"1\":\"921.2769\",\"2\":\"10793.69\"},{\"1\":\"917.9325\",\"2\":\"10766.71\"},{\"1\":\"946.5621\",\"2\":\"10995.43\"},{\"1\":\"974.1206\",\"2\":\"11213.74\"},{\"1\":\"975.7918\",\"2\":\"11233.26\"},{\"1\":\"952.6230\",\"2\":\"11046.00\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## DGP of Magical Score 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n## DGP of Magical Score 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3430.578         7.992\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3426.821         7.996\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3427.697         7.995\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>         3423             8\n```\n\n\n:::\n:::\n\n\n\n## Replicating Processes\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nreplicate(N, CODE)\n```\n:::\n\n\n\n\n- `N`: number of times to repeat a process\n- `CODE`: what is to repeated\n\n\n## Extracting $\\hat \\beta$ Coefficeints\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nb(MODEL, INDEX)\n```\n:::\n\n\n\n\n- `MODEL`: a model that can be used to extract components\n- `INDEX`: which component do you want to use\n    - `0`: Intercept\n    - `1`: first slope\n    - `2`: second slope\n    - `...`\n\n\n\n## Collecting 1000 Samples\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(lm(Magical_Score ~ Nature_Score, unicorns(500)), 1))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 7.999188 7.994065 8.006450 8.000913 7.998030 8.002701 7.995655 7.997190\n#>    [9] 8.003764 8.004942 7.996310 7.992369 7.999343 8.007798 8.003055 7.999967\n#>   [17] 7.996963 8.007002 8.004474 8.001974 8.008161 8.000562 7.998404 8.001685\n#>   [25] 8.001931 8.004712 7.999101 7.997815 7.999935 8.003453 7.997506 8.001280\n#>   [33] 8.003552 8.006749 7.997165 8.001865 7.996379 7.993348 7.998513 8.000768\n#>   [41] 8.003097 7.999129 8.004372 8.003041 7.993975 7.998910 8.001190 8.000942\n#>   [49] 7.999746 7.999688 7.993594 7.994996 8.002422 7.989518 7.997723 7.994958\n#>   [57] 7.994114 7.996826 7.995052 8.001248 8.007301 7.996727 7.997804 8.002967\n#>   [65] 8.000015 8.001162 8.000787 8.004214 7.997466 8.001163 7.998213 8.000170\n#>   [73] 7.998104 8.001403 7.996585 7.999256 7.998004 7.992356 8.002705 7.998699\n#>   [81] 7.992943 8.000563 8.001808 7.997942 8.003957 8.002216 7.995668 7.994529\n#>   [89] 7.999533 7.998495 8.001319 8.003092 7.996530 8.009957 8.003118 8.005911\n#>   [97] 7.998076 8.004319 7.997641 8.004834 8.008168 7.994949 8.007086 8.001668\n#>  [105] 8.006671 7.998219 7.997644 7.999944 7.998260 7.997045 7.997638 7.998105\n#>  [113] 7.997803 8.004451 8.000342 8.000082 8.001030 8.000169 8.002554 8.002498\n#>  [121] 7.996016 8.002667 8.003506 8.002446 8.000620 7.998174 8.001404 7.995196\n#>  [129] 7.997797 7.998023 7.995963 8.000308 8.004517 8.001850 8.005505 8.008480\n#>  [137] 7.994518 8.004152 8.003958 7.996812 8.005077 7.995832 7.987899 8.001311\n#>  [145] 7.998998 8.001887 8.003260 8.004384 7.999198 7.996962 8.002130 8.000052\n#>  [153] 8.003752 7.988790 8.006461 7.999122 7.993427 7.999639 8.004465 7.999630\n#>  [161] 8.003516 7.996560 8.001942 8.000975 8.000131 7.995460 7.999374 7.996438\n#>  [169] 7.995415 8.001123 7.997566 8.004099 8.008540 7.998575 8.001969 7.996012\n#>  [177] 8.001681 7.997212 8.002390 8.001827 7.993279 8.001625 8.002347 7.992115\n#>  [185] 8.001027 8.002748 7.998770 8.001502 7.995560 8.004179 7.999545 8.001931\n#>  [193] 8.002544 7.999645 7.998715 8.002182 7.997794 7.993753 7.993276 7.997752\n#>  [201] 8.002625 8.001565 7.992084 8.001127 8.005254 8.003376 7.999283 7.996900\n#>  [209] 8.003174 7.998024 8.007052 8.004720 7.996941 7.992750 7.999809 7.995994\n#>  [217] 8.003237 7.993944 7.998058 8.003032 8.006265 7.997765 7.998291 7.996816\n#>  [225] 7.993868 7.999325 7.995912 8.000752 8.004152 8.004350 7.999810 8.000396\n#>  [233] 7.998715 8.005155 8.003545 8.004151 7.998018 8.000471 7.998375 7.996022\n#>  [241] 7.996872 7.997904 8.003595 7.996457 8.006278 8.004289 8.001415 8.000912\n#>  [249] 7.998985 7.997612 8.001708 7.997164 8.000056 7.999734 8.002342 8.000937\n#>  [257] 8.003209 8.005050 8.000621 7.999961 7.998274 8.000162 8.000519 7.999714\n#>  [265] 7.999407 8.004286 8.001458 8.001443 8.000960 8.003174 7.992214 8.002256\n#>  [273] 7.994472 7.999204 7.996649 8.013387 8.000156 8.001149 7.996954 7.998354\n#>  [281] 7.993451 8.001283 8.003607 8.000450 8.001285 7.995255 7.994830 7.998198\n#>  [289] 7.999996 7.989538 8.005224 7.994367 8.001021 7.999954 7.996954 7.995612\n#>  [297] 7.994959 7.998267 8.007833 7.997399 7.996997 7.995758 8.003858 7.998169\n#>  [305] 8.003605 7.999554 8.007054 7.999367 7.996967 7.998810 8.001101 8.005026\n#>  [313] 7.992652 8.001825 8.005994 8.000397 7.995122 8.000861 7.998812 7.999081\n#>  [321] 7.994612 8.006235 8.006162 7.996829 8.007178 8.006483 7.998363 7.997141\n#>  [329] 7.995889 8.002298 8.002618 8.003256 8.001051 8.001311 8.000812 8.002860\n#>  [337] 8.007645 7.991647 8.000027 8.009421 7.993387 7.997820 7.993684 7.998291\n#>  [345] 8.006130 7.998605 8.002244 7.994395 8.002279 8.005692 7.997776 8.003492\n#>  [353] 7.995244 8.000575 7.996994 8.004945 7.991364 8.000150 7.999328 8.005794\n#>  [361] 8.002711 7.992781 7.992964 8.003581 7.997483 8.004749 7.997586 7.999462\n#>  [369] 8.001844 7.991862 8.001067 8.001972 7.999354 8.002660 8.001644 8.011120\n#>  [377] 8.002669 7.999174 8.003112 7.991275 8.000288 7.996375 8.007107 7.997122\n#>  [385] 7.998995 7.998742 7.996337 8.005714 8.001592 7.999671 7.990082 7.998100\n#>  [393] 7.994328 7.997987 8.003568 8.002604 8.013377 8.001440 7.998200 7.997861\n#>  [401] 8.003003 8.004100 7.996033 7.996239 7.998258 8.001661 7.999922 8.002922\n#>  [409] 8.000015 8.003999 8.001185 8.006779 7.997208 7.994732 8.001360 8.002296\n#>  [417] 7.999844 8.001508 8.001544 7.995227 8.003193 8.000937 7.995299 7.998182\n#>  [425] 8.001226 8.000858 7.995111 7.998823 7.998458 7.990017 7.996892 8.003490\n#>  [433] 7.998187 7.996350 8.000951 8.001794 7.999941 7.996256 8.000515 7.998753\n#>  [441] 8.004357 7.993250 8.003058 7.994107 8.004039 7.998505 7.998555 8.000070\n#>  [449] 7.996851 7.996528 7.995765 7.998857 7.997412 7.995418 7.998899 8.002210\n#>  [457] 8.006460 7.997031 8.001111 7.995323 8.009488 7.991174 7.997537 8.001306\n#>  [465] 8.001793 7.990440 8.007266 8.008316 8.006992 8.001193 7.996558 8.004028\n#>  [473] 8.000723 7.999538 8.000827 8.005287 8.004364 8.000688 7.995109 7.996489\n#>  [481] 7.998472 8.003344 8.000514 8.005124 8.003736 7.996973 8.001673 7.995014\n#>  [489] 8.005559 7.998086 7.999373 8.009146 7.995732 8.000439 7.998679 7.997064\n#>  [497] 8.005507 7.997522 8.006131 7.996577 7.999199 8.002639 7.994706 7.998656\n#>  [505] 7.998071 8.000667 8.005017 7.992431 8.005390 7.995703 8.005905 7.997540\n#>  [513] 8.002681 8.005816 8.005665 7.996933 8.004371 7.998131 7.999689 7.996950\n#>  [521] 7.994800 8.000648 7.996312 8.004547 8.005737 8.004547 8.008231 7.999944\n#>  [529] 8.003100 8.003994 8.000804 8.005620 7.999536 8.001992 8.007497 7.996302\n#>  [537] 8.000200 8.001397 7.996593 8.007146 8.003422 7.998273 8.001252 7.998399\n#>  [545] 7.998009 8.003268 7.995346 7.999126 7.995716 7.995920 7.996363 7.999842\n#>  [553] 7.997562 8.000414 7.998326 7.998649 7.998537 8.002614 8.000495 7.999315\n#>  [561] 8.003627 7.996466 8.000475 7.998775 7.998304 7.995647 8.004949 8.002553\n#>  [569] 7.995007 8.004221 8.001244 7.994550 7.998608 8.001693 7.993586 7.996907\n#>  [577] 8.005099 8.006259 7.999866 8.004832 8.004637 7.993392 7.996687 7.999508\n#>  [585] 7.997451 7.994166 8.003401 7.996942 7.993895 8.001456 8.003313 7.999330\n#>  [593] 7.998664 7.989642 8.000445 8.002629 8.004292 7.992629 8.001007 7.991789\n#>  [601] 7.994207 7.999159 7.994959 7.999531 7.999186 8.011454 7.995494 7.998312\n#>  [609] 8.000031 8.004307 7.995950 7.999792 7.998102 7.996739 7.999295 8.004932\n#>  [617] 8.002619 8.000238 7.999684 7.997118 7.998720 8.001628 8.005815 7.999825\n#>  [625] 8.001390 8.001382 7.997914 7.992878 7.994286 8.004773 7.996578 8.001234\n#>  [633] 8.002915 7.997406 7.995111 8.004437 8.001418 8.007195 8.004279 7.998303\n#>  [641] 8.000786 8.002530 8.005182 7.999080 7.998622 8.002426 7.994931 7.998719\n#>  [649] 8.004814 7.997920 7.996370 8.006949 7.995252 7.994286 7.996711 8.006878\n#>  [657] 7.997602 7.998251 7.997904 7.995304 8.004307 7.995106 7.990456 7.992473\n#>  [665] 7.997859 8.000211 7.996390 8.001959 7.998944 7.993094 8.003833 7.995886\n#>  [673] 8.004265 8.004999 7.998443 8.002934 8.004282 8.000994 8.003817 7.993714\n#>  [681] 7.990985 8.003615 7.995538 8.005262 7.999905 8.002591 8.004266 8.002599\n#>  [689] 8.008196 7.997384 7.999147 8.002396 7.998939 7.998498 7.998695 7.992105\n#>  [697] 8.002310 8.003467 7.995048 7.999361 7.998304 8.001853 7.994874 8.001086\n#>  [705] 8.003055 8.004421 7.993315 7.998270 8.005791 7.996663 7.996229 8.000156\n#>  [713] 8.003559 7.998585 8.000502 8.002989 8.005063 7.998874 7.998065 8.002758\n#>  [721] 7.994099 8.001370 8.005677 8.003768 7.995996 7.997041 7.995726 8.001120\n#>  [729] 7.991710 8.002073 8.000820 8.000865 8.003369 8.001711 7.996422 7.997083\n#>  [737] 7.996606 8.001735 8.000923 7.999885 8.003527 7.994647 7.996718 8.009631\n#>  [745] 8.000234 8.002965 7.998896 8.002505 7.998399 7.996590 8.004664 7.996327\n#>  [753] 7.991552 7.998564 7.991788 8.003852 7.996776 8.002603 8.000605 8.002898\n#>  [761] 7.998764 8.002222 8.003869 8.005369 8.002458 7.998981 7.992924 8.004300\n#>  [769] 7.998645 8.002458 7.999871 8.006379 7.999213 7.998898 7.990308 7.998358\n#>  [777] 7.993519 7.999212 8.000845 8.001771 8.001282 7.999353 8.001139 8.003216\n#>  [785] 8.004668 7.997508 8.005620 8.001220 8.001344 7.996684 8.000653 7.998996\n#>  [793] 7.997718 8.001150 8.001048 8.005996 7.998757 8.004225 7.994380 7.997739\n#>  [801] 8.003043 8.005497 7.994593 7.998375 8.008292 7.997263 8.004409 8.001821\n#>  [809] 8.002932 8.002752 8.000949 7.993225 7.991787 8.002237 7.997893 8.004022\n#>  [817] 8.003513 8.002671 8.003806 8.000444 8.003913 7.999368 8.001746 8.002206\n#>  [825] 7.994000 8.000581 8.005313 8.005114 8.001860 8.001280 8.009765 8.002745\n#>  [833] 8.006519 8.007280 7.992271 8.000640 8.007410 8.006878 7.995523 7.999970\n#>  [841] 7.998006 7.994855 7.996557 8.003545 7.998681 7.996160 7.994977 7.996842\n#>  [849] 8.005488 7.994495 7.997344 7.999525 8.002030 8.015007 8.002038 8.002799\n#>  [857] 8.001017 7.996851 7.997939 7.993065 8.005996 8.005425 7.995134 7.995516\n#>  [865] 7.990994 7.999727 7.996177 8.003611 7.995924 8.003185 8.003725 8.002057\n#>  [873] 8.006225 7.999230 7.998132 7.993187 8.007195 7.999432 7.998518 7.999965\n#>  [881] 7.998122 8.004957 8.004214 8.006941 7.999638 8.007544 7.999117 7.999049\n#>  [889] 7.995729 7.997863 7.998348 7.989988 7.998007 7.992897 8.001104 8.002448\n#>  [897] 7.999981 8.007125 8.000241 8.001524 7.994334 7.994969 7.998705 7.997440\n#>  [905] 7.998734 8.005268 8.000214 7.993066 7.998109 8.001595 8.005240 7.999762\n#>  [913] 7.996020 7.997609 8.000199 8.000730 7.994096 8.000669 7.996028 7.993072\n#>  [921] 7.999176 8.004489 7.995950 8.001420 7.999266 8.002974 8.003059 7.999577\n#>  [929] 7.996196 7.998266 8.000450 8.002807 8.002921 8.001687 7.999545 8.002379\n#>  [937] 8.007163 7.994642 7.995887 7.995251 7.998283 8.006514 8.002633 8.005251\n#>  [945] 8.001588 7.994123 7.994698 8.001280 7.999016 8.000208 7.997298 8.004252\n#>  [953] 7.993951 7.999565 7.999975 8.000531 7.995307 8.006047 8.004099 8.009291\n#>  [961] 8.002751 8.000752 8.009390 7.999989 7.997790 7.997987 7.995858 8.008845\n#>  [969] 7.996287 7.997668 7.995007 8.002356 8.003781 8.002664 7.998500 7.995739\n#>  [977] 8.000050 8.003902 8.000898 8.004449 7.999077 8.006893 7.996727 8.006895\n#>  [985] 7.994575 7.994796 7.997155 8.001379 7.998652 7.997821 7.993964 7.998443\n#>  [993] 7.993272 7.994757 7.994395 7.996345 7.995551 8.003149 7.997037 8.002012\n```\n\n\n:::\n:::\n\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}