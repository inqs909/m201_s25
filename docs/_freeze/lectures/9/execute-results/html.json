{
  "hash": "51bfc222ea1687f0ec41d4431a7618fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: 4/1/25\nformat:\n  revealjs:\n    width: 1200\n    sc-sb-title: true\n    footer: <https://m201.inqs.info/lectures/9>\n    df-print: paged\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false \n    chalkboard:\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: true\n    eval: true\n    message: false\n    code-fold: true\n    warnings: false\n    comment: \"#>\" \n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nfilters: \n  - reveal-header\n  - code-fullscreen\n  - reveal-auto-agenda\n\neditor: source\n---\n\n\n\n\n\n# Sampling Distribution\n\n## Sampling Distribution\n\nSampling Distribution is the idea that the statistics that you generate (slopes and intercepts) have their own data generation process.\n\n::: fragment\nIn other words, the numerical values you obtain from the `lm` and `glm` function can be different if we got a different data set.\n:::\n\n::: fragment\nSome values will be more common than others. Because of this, they have their own data generating process, like the outcome of interest has it's own data generating process.\n:::\n\n## Sampling Distributions\n\n- Distribution of a statistic over repeated samples\n\n- Different Samples yield different statistics\n\n::: notes\nIf we took many samples, the statistics (like means) would vary. Their distribution helps us quantify uncertainty.\n:::\n\n## Standard Error\n\nThe Standard Error (SE) is the standard deviation of a statistic itself.\n\n::: fragment\nSE tells us how much a statistic varies from sample to sample. Smaller SE = more precision.\n:::\n\n\n\n## Modelling the Data\n\n$$\nY_i = \\beta_0 + \\beta_1 X_i + \\varepsilon_i\n$$ \n\n- $Y_i$: Outcome data \n- $X_i$: Predictor data \n- $\\beta_0, \\beta_1$: parameters \n- $\\varepsilon_i$: error term\n\n## Error Term\n\n$$\n\\varepsilon_i \\sim DGP\n$$\n\n::: notes\n-   The error terms forces the outcome variable to be different from the mathematical model.\n-   The numbers being generated are random and cannot be predicted.\n:::\n\n## Randomness Effect\n\nThe randomness effect is a sampling phenomenom where you will get different samples everytime you sample a population.\n\n::: fragment\n\nGetting different samples means you will get different statistics.\n\n:::\n\n\n::: fragment\n\nThese statistics will have a distribution on their own.\n\n::: \n\n## Randomness Effect 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 3\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 4\n\n\n\n::: {.cell ecode-fold='true'}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Randomness Effect 5\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nx <- rnorm(1000)\ny <- 4 + 5 * x + rnorm(1000)\nbb <- round(b(lm(y ~ x),1),2)\nggplot(tibble(x = x, y = y), aes(x,y)) +\n  geom_point() +\n  annotate(\"text\", \n           x = -1, y = 15, \n           label = TeX(sprintf(r'($\\hat{\\beta}_1 = %g$)', bb)),\n           parse = TRUE,\n           size = 8) \n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Simulating Unicorns\n\n## Simulating Unicorns\n\nTo better understand the variation in statistics, let's simulate a data set of unicorn characteristics to visualize and understand the variation.\n\n::: fragment\nWe will simulate a data set using the `unicorns` function and only need to specify how many unicorns you want to simulate.\n:::\n\n## Simulating Unicorn Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nunicorns(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Unicorn_ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Age\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Gender\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Color\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Unicorn\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type_of_Horn\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Horn_Length\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Horn_Strength\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Weight\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Health_Score\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Personality_Score\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Elusiveness_Score\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Gentleness_Score\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Nature_Score\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"13\",\"3\":\"Non-binary\",\"4\":\"Gray\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"4.647585\",\"8\":\"25.05808\",\"9\":\"165.0407\",\"10\":\"7\",\"11\":\"0.29856758\",\"12\":\"11085.07\",\"13\":\"29.81537\",\"14\":\"35.435080\",\"15\":\"957.5296\"},{\"1\":\"2\",\"2\":\"8\",\"3\":\"Genderfluid\",\"4\":\"Gray\",\"5\":\"Rainbow\",\"6\":\"Opal\",\"7\":\"5.376600\",\"8\":\"25.30626\",\"9\":\"128.8522\",\"10\":\"10\",\"11\":\"0.59624188\",\"12\":\"10928.74\",\"13\":\"29.13561\",\"14\":\"28.948065\",\"15\":\"937.9244\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"Non-binary\",\"4\":\"White\",\"5\":\"Rainbow\",\"6\":\"Aquamarine\",\"7\":\"4.782893\",\"8\":\"31.47190\",\"9\":\"157.4744\",\"10\":\"4\",\"11\":\"0.42857778\",\"12\":\"10756.67\",\"13\":\"37.80086\",\"14\":\"29.292954\",\"15\":\"916.9722\"},{\"1\":\"4\",\"2\":\"2\",\"3\":\"Male\",\"4\":\"Pink\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.176628\",\"8\":\"23.97223\",\"9\":\"119.7085\",\"10\":\"5\",\"11\":\"1.99123092\",\"12\":\"10763.83\",\"13\":\"33.26302\",\"14\":\"12.560010\",\"15\":\"917.7799\"},{\"1\":\"5\",\"2\":\"2\",\"3\":\"Non-binary\",\"4\":\"Brown\",\"5\":\"Ember\",\"6\":\"Aquamarine\",\"7\":\"5.200511\",\"8\":\"29.83433\",\"9\":\"116.2853\",\"10\":\"1\",\"11\":\"0.73380843\",\"12\":\"10743.18\",\"13\":\"37.54932\",\"14\":\"18.478381\",\"15\":\"915.0170\"},{\"1\":\"6\",\"2\":\"14\",\"3\":\"Non-binary\",\"4\":\"Pink\",\"5\":\"Ruvas\",\"6\":\"Opal\",\"7\":\"5.203488\",\"8\":\"27.20873\",\"9\":\"143.6293\",\"10\":\"4\",\"11\":\"0.01892811\",\"12\":\"11118.63\",\"13\":\"32.47468\",\"14\":\"48.371613\",\"15\":\"962.2823\"},{\"1\":\"7\",\"2\":\"4\",\"3\":\"Genderfluid\",\"4\":\"Gray\",\"5\":\"Jewel\",\"6\":\"Opal\",\"7\":\"5.254723\",\"8\":\"28.28269\",\"9\":\"184.2138\",\"10\":\"10\",\"11\":\"0.45722982\",\"12\":\"10831.61\",\"13\":\"35.87149\",\"14\":\"15.258402\",\"15\":\"925.9928\"},{\"1\":\"8\",\"2\":\"9\",\"3\":\"Genderfluid\",\"4\":\"White\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"4.781157\",\"8\":\"29.17156\",\"9\":\"147.5068\",\"10\":\"8\",\"11\":\"0.03835426\",\"12\":\"10956.36\",\"13\":\"38.10182\",\"14\":\"1.222596\",\"15\":\"941.7400\"},{\"1\":\"9\",\"2\":\"19\",\"3\":\"Non-binary\",\"4\":\"Brown\",\"5\":\"Ruvas\",\"6\":\"Aquamarine\",\"7\":\"5.146643\",\"8\":\"32.93680\",\"9\":\"115.2733\",\"10\":\"1\",\"11\":\"2.57994686\",\"12\":\"11213.21\",\"13\":\"36.87680\",\"14\":\"14.086519\",\"15\":\"973.4080\"},{\"1\":\"10\",\"2\":\"4\",\"3\":\"Agender\",\"4\":\"Gold\",\"5\":\"Ember\",\"6\":\"Opal\",\"7\":\"5.311973\",\"8\":\"22.90807\",\"9\":\"136.7327\",\"10\":\"7\",\"11\":\"0.37614374\",\"12\":\"10838.91\",\"13\":\"41.86791\",\"14\":\"-9.641447\",\"15\":\"926.8173\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## Unicorn Data Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nnames(unicorns(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"Unicorn_ID\"        \"Age\"               \"Gender\"           \n#>  [4] \"Color\"             \"Type_of_Unicorn\"   \"Type_of_Horn\"     \n#>  [7] \"Horn_Length\"       \"Horn_Strength\"     \"Weight\"           \n#> [10] \"Health_Score\"      \"Personality_Score\" \"Magical_Score\"    \n#> [13] \"Elusiveness_Score\" \"Gentleness_Score\"  \"Nature_Score\"\n```\n\n\n:::\n:::\n\n\n\nWe will only look at `Magical_Score` and `Nature_Score`.\n\n## Magical and Nature Score\n\n$$\nMagical =  3423 + 8 \\times Nature + \\varepsilon\n$$ \n\n$$\n\\varepsilon \\sim N(0, 3.24)\n$$\n\n## Simulating $N(0, 3.24)$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nrnorm(1, 0, sqrt(3.24))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.02709\n```\n\n\n:::\n:::\n\n\n\n## Collecting\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nunicorns(10) |> select(Nature_Score, Magical_Score)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Nature_Score\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Magical_Score\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"957.3474\",\"2\":\"11080.55\"},{\"1\":\"921.9175\",\"2\":\"10800.87\"},{\"1\":\"921.6391\",\"2\":\"10797.47\"},{\"1\":\"971.5215\",\"2\":\"11195.03\"},{\"1\":\"946.6682\",\"2\":\"11000.15\"},{\"1\":\"976.2431\",\"2\":\"11229.65\"},{\"1\":\"954.9683\",\"2\":\"11063.24\"},{\"1\":\"921.4597\",\"2\":\"10795.62\"},{\"1\":\"917.2585\",\"2\":\"10760.11\"},{\"1\":\"942.6991\",\"2\":\"10966.91\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n## DGP of Magical Score 1\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n## DGP of Magical Score 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(unicorns(500), aes(Magical_Score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## Estimating $\\beta_1$ via `lm`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu1 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u1)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3424.206         7.999\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu2 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u2)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3428.168         7.995\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu3 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u3)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>     3425.273         7.998\n```\n\n\n:::\n:::\n\n\n\n## Collecting a new sample\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nu4 <- unicorns(500)\nlm(Magical_Score ~ Nature_Score, u4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = Magical_Score ~ Nature_Score, data = u4)\n#> \n#> Coefficients:\n#>  (Intercept)  Nature_Score  \n#>         3423             8\n```\n\n\n:::\n:::\n\n\n\n## Replicating Processes\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nreplicate(N, CODE)\n```\n:::\n\n\n\n\n- `N`: number of times to repeat a process\n- `CODE`: what is to repeated\n\n\n## Extracting $\\hat \\beta$ Coefficeints\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nb(MODEL, INDEX)\n```\n:::\n\n\n\n\n- `MODEL`: a model that can be used to extract components\n- `INDEX`: which component do you want to use\n    - `0`: Intercept\n    - `1`: first slope\n    - `2`: second slope\n    - `...`\n\n\n\n## Collecting 1000 Samples\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nbetas <- replicate(1000,\n                   b(lm(Magical_Score ~ Nature_Score, unicorns(500)), 1))\n\nbetas\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    [1] 8.009411 8.000034 8.002532 7.997320 8.000244 7.999882 8.003269 8.001610\n#>    [9] 7.999905 8.005670 8.000580 7.997195 8.002852 7.995393 7.996444 8.002745\n#>   [17] 8.001887 7.994915 8.001123 8.004307 8.004007 7.999049 7.999109 8.006378\n#>   [25] 7.993075 8.001174 8.003209 7.997006 8.002772 8.001755 7.993658 7.995812\n#>   [33] 8.004535 7.997194 7.999553 7.994827 7.999594 7.995500 8.007426 7.997447\n#>   [41] 8.003328 8.003053 8.006318 7.996668 8.007596 7.997817 8.000709 7.997662\n#>   [49] 8.005635 7.990259 7.999532 8.000131 7.995633 7.998762 8.000962 7.998789\n#>   [57] 8.006868 7.992760 8.001526 8.005231 7.997935 7.999358 7.997929 8.007707\n#>   [65] 8.005162 8.001781 8.000645 8.001977 8.000146 8.004556 7.994408 8.001464\n#>   [73] 7.995248 8.002204 7.998368 7.994690 8.003040 8.008864 7.998745 7.999631\n#>   [81] 7.994294 7.993355 7.997088 8.002049 7.997510 7.996274 8.000729 8.000922\n#>   [89] 8.000278 8.004242 8.000775 7.999794 7.995081 7.998018 7.998423 7.998871\n#>   [97] 7.994909 8.006140 7.993714 7.997035 7.996300 7.995104 8.000820 8.002309\n#>  [105] 8.001082 8.003344 7.997069 8.004743 7.996731 8.002120 8.001943 7.993214\n#>  [113] 8.004691 8.008097 7.996646 8.001065 7.991767 7.995980 7.999164 8.003528\n#>  [121] 7.994266 7.999878 8.003923 7.997743 7.995629 8.000725 7.997201 8.001935\n#>  [129] 7.996169 7.996810 8.000213 7.998423 8.003433 8.000014 8.002123 7.998617\n#>  [137] 8.004372 7.999183 8.000180 7.999917 8.000953 8.000836 8.004236 7.995727\n#>  [145] 8.001172 8.005490 7.996404 7.997205 8.000948 8.000405 7.994130 7.999152\n#>  [153] 7.998654 7.994207 7.997136 7.997522 8.002486 8.000386 7.991310 8.001485\n#>  [161] 7.997334 7.999680 7.999239 8.000255 8.004410 7.999911 8.005863 7.996543\n#>  [169] 7.999775 8.004170 8.005443 8.009010 8.004154 8.000982 7.999585 7.996076\n#>  [177] 7.997143 8.000074 7.998824 8.003357 7.992142 7.989565 7.998358 7.999734\n#>  [185] 7.994634 8.001252 7.995047 8.001639 8.000641 8.005556 8.001568 7.999714\n#>  [193] 8.004110 7.994450 7.992584 7.995671 7.995208 7.997683 8.000324 7.994974\n#>  [201] 7.994276 8.000512 8.004334 8.002051 8.006073 8.000153 8.000709 7.999575\n#>  [209] 8.003125 7.987723 8.000518 8.004110 7.997880 8.007794 7.995296 7.994863\n#>  [217] 7.998998 8.001847 8.003724 8.000838 8.001223 8.001924 7.998750 8.000091\n#>  [225] 7.995829 7.996949 7.999766 7.998105 8.002685 7.993021 7.993323 8.003627\n#>  [233] 8.000727 8.001469 7.995134 8.000510 7.996840 7.998377 8.009131 7.997038\n#>  [241] 8.001460 8.002694 7.992680 7.991463 7.990493 7.995568 8.006497 8.000270\n#>  [249] 8.004758 8.000443 8.007943 8.000625 7.994302 8.004075 8.000968 8.005474\n#>  [257] 8.004616 7.998355 8.004890 8.002571 7.997972 8.003418 8.002408 7.994277\n#>  [265] 7.997048 8.001479 8.005500 7.997081 7.999900 7.994799 7.998553 8.001980\n#>  [273] 7.999335 8.005232 8.000825 7.994522 8.002973 7.988779 7.994568 7.994067\n#>  [281] 8.000055 7.998706 8.000465 7.995788 8.008668 8.003712 8.001219 7.995751\n#>  [289] 8.003821 7.997433 8.003048 7.995638 7.996426 7.994984 8.003874 8.002628\n#>  [297] 7.994901 7.996754 7.996108 8.003482 7.999250 8.000896 8.000080 8.003029\n#>  [305] 8.000247 7.997000 7.998734 8.004408 7.999598 8.004727 7.998647 8.001436\n#>  [313] 7.989947 7.995161 7.998504 8.003989 7.998915 7.997190 7.992747 7.999104\n#>  [321] 7.996342 8.004305 7.998644 8.002534 8.001944 8.001939 8.001143 8.001344\n#>  [329] 7.998096 8.006801 8.000838 8.002558 7.991628 8.001416 8.003979 7.992662\n#>  [337] 8.008269 8.003511 8.004203 7.995921 7.997865 8.001738 7.995274 8.004888\n#>  [345] 7.994914 8.003111 7.999542 7.999907 8.000282 8.002440 8.000973 8.006511\n#>  [353] 7.997271 7.999308 8.006976 7.998026 8.002061 7.997943 7.995385 7.983585\n#>  [361] 7.993614 7.998597 7.999960 7.994983 8.005723 8.001426 7.994271 7.999424\n#>  [369] 7.995307 8.000044 8.005055 8.000841 7.999014 7.994666 7.993285 7.999726\n#>  [377] 8.001144 7.998545 7.996921 8.000039 8.001448 8.002394 7.997575 8.002470\n#>  [385] 7.999881 8.003580 8.002726 7.998996 7.996743 7.998809 7.998746 7.998572\n#>  [393] 8.002857 7.998914 7.997859 8.000113 8.001090 7.998538 8.004499 7.996908\n#>  [401] 8.003532 7.998524 7.990934 7.991446 7.999761 8.000523 8.003990 7.996603\n#>  [409] 7.998165 7.996134 7.996223 7.994279 7.999120 8.004473 8.002194 7.999542\n#>  [417] 8.002410 8.000263 7.994492 8.001055 8.001784 7.998098 8.000269 8.001217\n#>  [425] 8.002684 7.998564 8.001339 7.996181 7.992251 7.998531 8.000469 8.000152\n#>  [433] 7.998461 8.001696 8.006753 8.007851 8.000119 8.004584 7.998617 7.998503\n#>  [441] 7.996399 8.000719 7.992545 8.001747 7.996705 7.999348 7.998455 8.006634\n#>  [449] 7.996004 8.003554 7.994848 8.002513 8.008254 8.002571 8.006230 7.999919\n#>  [457] 7.992351 8.002078 7.999258 7.994482 8.002895 8.006958 8.002104 7.992316\n#>  [465] 7.993857 8.000512 8.002346 8.002325 8.005953 7.997647 7.992370 7.996642\n#>  [473] 8.000452 8.003397 7.996766 8.012054 8.001361 8.002341 8.002416 8.004370\n#>  [481] 8.000616 7.999940 8.009196 7.999335 8.003129 8.000018 7.994398 7.996830\n#>  [489] 7.995275 7.997660 8.002876 7.998166 7.997590 8.004897 7.999819 7.994263\n#>  [497] 7.996247 7.999338 8.005517 7.999700 8.002638 8.005101 7.998085 8.001764\n#>  [505] 8.006598 8.001380 8.008053 7.998155 8.005559 8.001318 8.000516 7.993055\n#>  [513] 8.001063 7.994606 7.995914 7.997484 7.997135 7.992782 7.996050 7.999892\n#>  [521] 7.996593 7.998264 7.995098 7.998805 7.999446 8.000171 8.001945 8.001147\n#>  [529] 8.002358 7.998405 8.003360 7.996338 8.006070 8.002703 8.002195 7.999011\n#>  [537] 8.004729 8.005017 8.002746 7.997785 8.001046 8.001602 8.004384 7.995483\n#>  [545] 8.000390 7.999751 8.004314 7.999364 8.002940 7.992458 7.998607 8.006824\n#>  [553] 7.998553 8.005531 8.006129 8.005012 8.000845 8.004638 8.004950 8.009109\n#>  [561] 8.002850 7.998524 8.001484 8.000166 7.995807 8.002061 8.003383 8.001265\n#>  [569] 8.001178 8.004755 8.001244 8.003609 7.996938 7.999118 8.005151 8.003572\n#>  [577] 7.999813 7.993630 7.994776 7.991365 8.004711 8.002355 8.006677 7.991672\n#>  [585] 7.995846 7.997462 8.000145 8.003116 8.000768 8.005589 8.001880 7.996475\n#>  [593] 7.997031 8.004332 8.002551 8.002391 8.013933 8.001497 8.001276 7.997962\n#>  [601] 8.000538 8.001864 8.000635 7.999835 8.002754 8.003554 7.999605 7.993323\n#>  [609] 7.997814 8.001524 8.001527 8.002762 8.000076 8.001744 8.003905 7.993998\n#>  [617] 8.006434 8.012345 8.003778 8.007392 7.999864 8.000095 7.997322 8.006116\n#>  [625] 8.000958 7.995642 8.002479 8.000020 8.007325 7.998691 8.001988 8.000607\n#>  [633] 7.993161 7.996810 8.005636 7.997642 7.998859 7.998311 7.999526 8.005778\n#>  [641] 7.995550 8.003927 7.990963 8.001491 7.998499 7.999448 7.998764 8.003172\n#>  [649] 7.994248 7.995878 8.003859 7.998139 7.998464 7.998849 7.995212 8.000182\n#>  [657] 8.000029 8.002850 8.002199 8.002627 7.993778 7.998854 8.002924 8.002575\n#>  [665] 7.997314 8.000084 7.995599 7.997432 8.000903 8.001498 7.999353 7.996714\n#>  [673] 7.999844 8.000878 7.998680 7.998803 7.993224 8.000194 7.998537 8.004054\n#>  [681] 8.001437 7.998298 8.003386 8.008650 8.002612 8.003100 8.002992 8.000315\n#>  [689] 8.005189 8.002443 8.000644 7.993542 8.006779 8.003590 7.999608 7.999161\n#>  [697] 8.003728 7.998343 7.995738 8.000916 8.002408 8.002595 8.000335 7.998330\n#>  [705] 7.999737 7.999331 8.000963 7.991449 7.996861 7.996623 8.000933 7.993817\n#>  [713] 8.001085 7.998308 8.004915 7.997291 8.000942 7.999255 7.999159 7.990654\n#>  [721] 7.993752 8.000484 8.004092 7.996881 8.002331 8.002887 8.003361 7.999829\n#>  [729] 8.000306 7.994088 7.993799 7.993779 8.000693 7.999941 8.001778 8.005161\n#>  [737] 7.995481 8.003894 7.991925 7.999846 8.001415 8.004767 8.011198 7.996744\n#>  [745] 8.001538 7.997834 7.999200 8.006430 8.000973 8.000980 7.998034 8.002548\n#>  [753] 7.999406 7.999198 7.999811 8.005777 8.001636 7.997033 8.007344 8.003021\n#>  [761] 7.996804 7.996903 7.990208 8.002794 7.998210 8.002222 8.000408 8.001179\n#>  [769] 7.995948 8.002131 7.998584 7.999082 8.000239 8.001699 8.001405 7.999496\n#>  [777] 8.002452 7.996669 7.996768 7.996644 7.998187 8.002089 8.001104 8.005671\n#>  [785] 7.999834 7.991555 7.992890 7.999017 8.003787 8.000050 8.008745 7.996001\n#>  [793] 8.004716 8.003108 8.001277 7.991978 7.995896 8.005996 7.997626 7.996958\n#>  [801] 7.999969 7.998312 8.007932 7.998611 8.006165 8.002901 7.997155 8.003198\n#>  [809] 8.008697 7.999836 7.999391 7.995687 8.006363 7.997835 7.991287 8.000445\n#>  [817] 8.003139 7.996467 8.006028 7.999025 8.003589 7.995952 7.997763 7.999713\n#>  [825] 7.996217 8.001077 7.995187 8.005163 7.998378 7.998327 8.007824 8.002066\n#>  [833] 7.998408 8.002433 8.006946 8.001953 8.004196 7.995856 8.003517 7.999929\n#>  [841] 8.001481 7.998992 7.998492 8.001658 7.996811 7.997522 7.999166 8.002015\n#>  [849] 8.002890 8.000557 7.997840 8.005403 8.005477 7.996855 8.001807 7.997490\n#>  [857] 7.996751 7.999156 7.997348 8.003418 7.993576 8.000551 7.999835 8.002881\n#>  [865] 8.003522 8.006989 7.998422 7.998242 7.999112 7.995949 8.006374 7.999219\n#>  [873] 7.994635 8.002163 8.010271 7.998819 8.001000 7.998217 8.001709 7.995816\n#>  [881] 8.007755 7.999040 7.999675 8.005182 7.992661 7.998943 8.000869 7.992263\n#>  [889] 7.988410 8.001895 8.001042 8.005578 7.999228 7.989248 7.999457 7.993131\n#>  [897] 8.004137 8.002031 8.000571 8.004071 8.004534 8.003333 8.003957 7.999713\n#>  [905] 7.997169 8.005107 8.006866 7.997841 7.995333 8.006662 7.995029 8.003519\n#>  [913] 8.000811 7.995352 8.000970 8.006239 8.003228 8.012728 7.992416 8.002429\n#>  [921] 7.993412 7.998297 8.000941 8.002360 8.007358 8.003923 7.999657 7.998341\n#>  [929] 7.999335 8.000061 7.996423 8.005054 7.998391 7.998059 7.993333 8.000130\n#>  [937] 8.005318 7.997050 8.006203 8.001484 7.989570 7.999879 7.995503 7.997671\n#>  [945] 7.999462 8.003528 8.002605 8.008332 8.008013 8.000044 8.001405 8.002389\n#>  [953] 8.002788 7.998576 7.993897 7.997266 7.997934 8.000064 7.991209 7.997379\n#>  [961] 8.000222 7.995588 7.994104 8.011676 8.002345 8.004855 7.998065 7.994558\n#>  [969] 7.995234 7.996167 7.996817 8.004972 7.992507 8.004580 7.999074 8.001518\n#>  [977] 8.001078 8.009173 7.999080 7.999986 8.002510 8.006545 7.994186 8.004138\n#>  [985] 7.999883 7.993548 8.007001 7.996380 8.003078 7.992660 7.997422 8.002920\n#>  [993] 8.008471 8.001320 8.003576 8.000408 7.996290 7.999163 7.992044 8.003355\n```\n\n\n:::\n:::\n\n\n\n## Distributions of $\\hat \\beta_1$\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data.frame(x = betas), aes(x = x)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n# Central Limit Theorem\n\n## Central Limit Theorem\n\nThe Central Limit Theorem (CLT) is a fundamental concept in probability and statistics. It states that the distribution of the sum (or average) of a large number of independent, identically distributed (i.i.d.) random variables will be approximately normal, regardless of the underlying distribution of those individual variables.\n\n\n## Formal Statement of the CLT\n\n- Let $X_1$, $X_2$, ..., $X_n$ be a sequence of i.i.d. random variables with mean $\\mu$ and standard deviation $\\sigma$.\n- Let $\\bar X$ be the sample mean of these variables.\n- As n (the sample size) approaches infinity, the distribution of $\\bar X$ approaches a normal distribution with:\n    - Mean: $\\mu$\n    - Standard Deviation: $\\sigma/\\sqrt{n}$\n\n## CLT Example\n\n- **Imagine:** You're flipping a fair coin many times. \n    - Each flip is an independent event (heads or tails).\n    - The probability of heads/tails is the same for each flip.\n- **Now:** Calculate the average number of heads after each set of 10 flips, then each set of 100 flips, and so on.\n- **Observation:** As the number of flips in each set increases, the distribution of these averages will start to resemble a bell-shaped curve (normal distribution), even though the individual coin flips are not normally distributed.\n\n## CLT Implications\n\n- **Approximation:** Even if the underlying data is not normally distributed, the distribution of the sample means will be approximately normal for large enough sample sizes.\n- **Practical Rule:** A common rule of thumb is that the sample size (n) should be at least 30 for the CLT to provide a good approximation. However, this is a guideline, and the actual required sample size can vary depending on the shape of the original distribution.\n\n## Normal Example $n = 10$\n\nSimulating 500 samples of size 10 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#rnorm(10, 5, 2)\nsims <- replicate(500, rnorm(10, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(10)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 30$\n\nSimulating 500 samples of size 30 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(30, 5, 2)\nsims <- replicate(500, rnorm(30, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(30)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n\n## Normal Example $n = 50$\n\nSimulating 500 samples of size 50 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(50, 5, 2)\nsims <- replicate(500, rnorm(50, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(50)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n## Normal Example $n = 100$\n\nSimulating 500 samples of size 100 from a normal distribution with mean 5 and standard deviation of 2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# rnorm(100, 5, 2)\nsims <- replicate(500, rnorm(100, 5, 2))\nsims_mean <- colMeans(sims)\nggplot(data.frame(x = sims_mean), aes(x)) +\n  geom_density() +\n  stat_function(fun = dnorm, \n                args = list(mean = 5, sd = 2 / sqrt(100)),\n                col = \"red\")\n```\n\n::: {.cell-output-display}\n![](9_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n\n# Common Sampling Distributions\n\n## Normal DGP\n\nWhen the data is said to have a normal distribution (DGP), there are special properties with both the mean and standard deviation, regardless of sample size.\n\n## Statistics\n\n::: {.columns}\n::: {.column}\n**Mean**\n$$\n\\bar X = \\sum ^n_{i=1} X_i\n$$\n:::\n::: {.column}\n**Standard Deviation**\n$$\ns^2 = \\frac{1}{n}\\sum ^n_{i=1} (X_i - \\bar X)^2\n$$\n\n:::\n:::\n\n\n## When the true $\\mu$ and $\\sigma$ are known\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $\\bar X$\n\n$$\n\\bar X \\sim N(\\mu, \\sigma/\\sqrt{n})\n$$\n\n## Distribution of Z\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\sim N(0,1)\n$$\n\n## When the true $\\mu$ and $\\sigma$ are unknown\nA data sample of size $n$ is generated from:\n$$\nX_i \\sim N(\\mu, \\sigma)\n$$\n\n## Distribution of $s^2$ (unknown $\\mu$)\n$$\n(n-1)s^2/\\sigma^2 \\sim \\chi^2(n-1)\n$$\n\n## Distribution of Z (unknown $\\sigma$)\n\n$$\nZ = \\frac{\\bar X - \\mu}{\\sigma/\\sqrt{n}} \\rightarrow \\frac{\\bar X - \\mu}{s/\\sqrt{n}} \\sim t(n-1)\n$$\n\n\n\n# Sampling Distributions for Regression Models\n\n\n## Regression Coefficients\n\nThe estimates of regression coefficients (slopes) have a distribution!\n\n::: fragment\n\nBased on our outcome, we will have 2 different distributions to work with: Normal or t.\n\n:::\n\n## Linear Regression\n\n$$\n\\frac{\\hat\\beta_j-\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim t_{n-p^\\prime}\n$$\n\n\n## Logistic Regression\n\n$$\n\\frac{\\hat\\beta_j - \\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n\n## $\\beta_j = 0$\n\n$$\n\\frac{\\hat\\beta_j}{\\mathrm{se}(\\hat\\beta_j)} \\sim N(0,1)\n$$\n",
    "supporting": [
      "9_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}