---
title: "Inference"
format:
  revealjs:
    scrollable: true
    theme: [default, styles.scss]
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: notes/chalkboard_1a.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
knitr:
  opts_chunk: 
    echo: false
    eval: true
    message: false
    warnings: false
    comment: "#>" 
    error: true
    
revealjs-plugins:
  - pointer
  - verticator
  
filters: 
  - reveal-header
  - code-fullscreen
  - reveal-auto-agenda
  
auto-agenda:
  bullets: numbered
  heading: Learning Outcomes
  
editor: visual
---

```{r}
#| include: false

library(palmerpenguins)
library(ggformula)
library(ThemePark)
library(mosaic)
library(tidyverse)
library(taylor)
library(DT)
library(supernova)
library(coursekata)
set.seed(29)
# penguins_nona <- penguins |> drop_na() |> 
#   filter(species != "Chinstrap") |> 
#   slice_sample(n=8) |>
#   select(species, bill_length_mm)
# tuesdata <- tidytuesdayR::tt_load('2020-07-07')
tuesdata <- tidytuesdayR::tt_load(2020, week = 28)

coffee_ratings <- tuesdata$coffee_ratings
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
res <- lm(flavor ~ aroma, data = coffee_aroma)
# Or read in the data manually

#coffee_ratings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')

```

# Inference

## Motivating Example

```{r}
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
  geom_point() + theme_bw() +
  theme(axis.title = element_text(size = 36)) + 
  geom_smooth(method = "lm", se = F)

```

## Linear Model

```{r}
#| echo: true
res <- lm(flavor ~ aroma, data = coffee_aroma)
res
```

## Is there a linear relationship or due to random chance?

## Inference

The process to determine if an estimate of a parameter is valuable or just due to random chance.

## Estimation

## Randomness of Data

```{r}
coffee_aroma <- coffee_ratings |> filter(aroma > 5.5)
coffee_aroma |> ggplot(aes(x=aroma, y = flavor)) +
  geom_point() + theme_bw() +
  theme(axis.title = element_text(size = 36))

```

## Randomness of Data

```{r}
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
  gf_theme(theme_bw()) %>%
  gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
  gf_theme(axis.title = element_text(size = 24))
```

## Randomness of Data

```{r}
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
  gf_theme(theme_bw()) %>%
  gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
  gf_theme(axis.title = element_text(size = 24))
```

## Shuffled vs Emperical

```{r}
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
  gf_point(flavor ~ aroma, data = coffee_aroma, color = "red") %>%
  gf_theme(theme_bw()) %>%
  gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
  gf_theme(axis.title = element_text(size = 24))

```

## Fitting a Line

```{r}
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
  gf_theme(theme_bw()) %>%
  gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
  gf_theme(axis.title = element_text(size = 24)) %>%
  gf_smooth(method = "lm")
```

## Original to new

```{r}
#| echo: true
gf_point(shuffle(flavor) ~ aroma, data = coffee_aroma) %>%
  gf_theme(theme_bw()) %>%
  gf_labs(x = "Aroma", y = "Shuffled Flavor") %>%
  gf_theme(axis.title = element_text(size = 24)) %>%
  gf_smooth(method = "lm") %>%
  gf_coefline(model = res, color = "red")
```

## Shuffle LM Object

```{r}
#| echo: true
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)
lm(shuffle(flavor) ~ aroma, data = coffee_aroma)

```

## Only want at b1

```{r}
#| echo: true
b1(shuffle(flavor) ~ aroma, data = coffee_aroma)
b1(shuffle(flavor) ~ aroma, data = coffee_aroma)
b1(shuffle(flavor) ~ aroma, data = coffee_aroma)
b1(shuffle(flavor) ~ aroma, data = coffee_aroma)
b1(shuffle(flavor) ~ aroma, data = coffee_aroma)
b1(shuffle(flavor) ~ aroma, data = coffee_aroma)
```

## Repeat it 10,000

```{r}
#| echo: true
b1_sim <- do(10000) * b1(shuffle(flavor) ~ aroma, 
                         data = coffee_aroma)
b1_sim
```

## Distribution of $b_1$

The distribution of $b_1$ shows all the possible values that $b_1$ can take with their respective probabilities.

## Distribution of $b_1$

```{r}
#| echo: true
gf_dens(b1_sim, ~ b1) %>%
  gf_theme(axis.title = element_text(size = 36),
           axis.text = element_text(size=28))
```

## What about our observed value?

```{r}
#| echo: true
gf_dens(b1_sim, ~ b1) %>%
  gf_vline(xintercept = b1(res))
```
